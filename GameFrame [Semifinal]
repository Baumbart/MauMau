import java.awt.*;
import java.awt.event.*;

import javax.swing.*;
//import javax.swing.event.*;

public class GameFrame extends JFrame {
  // Anfang Attribute
	
  //Options Buttons
  static JButton[] optionsButtons = new JButton[4];{
  
	  for(int i=1; i<=3;i++){
		  optionsButtons[i] = new JButton();
		  //Button1 für die auswahl: "Zweispielermodus" und "Spieler 1 beginnt"
		  //Button2 für die auswahl:"Dreispielermodus" und "Spieler 2 beginnt"	
		  //Button3 für die auswahl:"Spieler 3 beginnt"
	  }
  }
  
  //Labels für Kommunikation mit dem User/Spieler
  static JLabel labelSpielerAnweisungen = new JLabel();//Label für: Anweisungen an den Spieler       
  static JLabel labelAblageAusgabe = new JLabel();//Label für: Das Anzegen  der Obersten Ablagestapelkarte 
  static JLabel labelObersteKarte = new JLabel();//Label für: Den Schriftzug "Oberste Karte"  
  static JLabel labelHandKarten = new JLabel();//Label für: Das Anzeigen der aktuellen Handkarten
  static JLabel labelTextHandkarten = new JLabel();//Label für:Den Schriftzug "Handkarten"
  static JLabel labelInfoTextGezogen = new JLabel();//Label für: Die Informationseinblendung von einer oder zwei gezognen Karten
  static JLabel LabelTextWinner = new JLabel();//Label für: Den Schriftzug welcher Spieler das Spiel gewonnen hat
  
  //Zählvariable
  static int pressCounter;//Zählt wie oft Button 2+3 Gedrückt wurden
 
  // Buttons für das Legen und Ziehen 
  static JButton karteLegenButton = new JButton();//Button für die auswahl: "Ablegen einer Karte"
  static JButton karteAufnehmenButton = new JButton();//Button für die auswahl: "Eine Karte aufnehmen"
  
  //KartenablageButtons     
  static JButton[] kartenAblageButtons = new JButton[21];{//kartenAblageButtons[1-20] für die auswahl der Abzulegenden Karte
	  //21 daher damit Konflikte in der Zählweise bzw den Indices vorgebeugt werden 
	  
	  for(int i=1; i<=20; i++){ //Daher auch der Start bei 1
		  kartenAblageButtons[i] = new JButton();
	  }
  }
  
  //Buttons für den "Bubenwunsch"
  static JButton bubeSetCircle = new JButton();//Button für die auswahl:"°" Bei einem abgelegten Buben 
  static JButton bubeSetPlus = new JButton();//Button für die auswahl:"+" Bei einem abgelegten Buben
  static JButton bubeSetHashtag = new JButton();//Button für die auswahl:"#" Bei einem abgelegten Buben
  static JButton bubeSetStar = new JButton();//Button für die auswahl:"*" Bei einem abgelegten Buben
 
  //Buttons für das Beenden und Neustarten des Spiels
  static JButton neuStartButton = new JButton();//Button für die auswahl: "Neustart"
  static JButton beendeenButton = new JButton();//Button für die auswahl: "Beenden des Spiels"
  // Ende Attribute
  
  public GameFrame(String title) { 
    // Frame-Initialisierung
    super(title);
    setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);//Setzt die beim Schließen ausgeführte operation auf "Entfernen aus dem Speicher" 
    int frameWidth = 1144; //Fensterhöhe 
    int frameHeight = 670; //Fensterbreite
    setSize(frameWidth, frameHeight);
    Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
    int x = (d.width - getSize().width) / 2;// Die breite das Fensters wird mit der Hälte der Bildschirmbreite verringert
    int y = (d.height - getSize().height) / 2;// Die höhe das Fensters wird mit der Hälte der Bildschirmhöhe verringert
    setLocation(x, y);//Startposition
    setResizable(false);//Verhindert das Vergrößern oder verkleinern des Fensters
    Container cp = getContentPane();//Das(/die) "Content Pane", in welchem sich der Hauptteil der Buttons o.ä. befindet(muss bei Initialisierung festgelegt werden) wird der Variable cp om Typ Container übergeben 
    cp.setLayout(null);//Layoutmanager(?) 
    cp.setBackground(Color.WHITE); //Setzt die die Hintergrundfarbe des JFrames auf weiss
    // Anfang Komponenten    
    
    optionsButtons[1].setBounds(104, 256, 265, 129);//jew höhe breite und position in x- und y- richtung(hier überall Gleiche Beschreibung)
    optionsButtons[1].setText("Zwei Spieler");//Test der auf dem Button/Label zu Sehen ist/Text den der User zu Gesicht bekommt(hier überall Gleiche Beschreibung)
    optionsButtons[1].setMargin(new Insets(2, 2, 2, 2));//Da Button ein (Interfce ist) bzw eigenschaften und methoden von unter anderem solchen erbt sogt dies für die allgemeine verhaltensweise von Buttons(und Menüleisten) "Defines common behaviors for buttons and menu items" (hier überall Gleiche Beschreibung) 
    optionsButtons[1].addActionListener(new ActionListener() {//Aktionswächter gibt auskunft sobald ein sich ein "erignis"(event) ereignet
    	public void actionPerformed(ActionEvent evt) {//wie z.B. ein "ActionEvent" 
        jButton2_ActionPerformed(evt);//bei "ActionPerformed" (Knopfdruck)(hier überall Gleiche Beschreibung)
      }
    });
    cp.add(optionsButtons[1]);//Hinzufügen des Labels zum "Content Pane"(hier überall Gleiche Beschreibung)
    
    optionsButtons[2].setBounds(400, 256, 265, 129);
    optionsButtons[2].setText("Drei Spieler");
    optionsButtons[2].setMargin(new Insets(2, 2, 2, 2));
    optionsButtons[2].addActionListener(new ActionListener() { 
      public void actionPerformed(ActionEvent evt) { 
        jButton3_ActionPerformed(evt);
      }
    });
    cp.add(optionsButtons[2]);
    
    labelSpielerAnweisungen.setBounds(360, 48, 347, 49);//Diemensionen und Standpunkt(hier überall Gleiche Beschreibung)
    labelSpielerAnweisungen.setText("Spieleraufforderungen");//Text im sinne von Anmerkungen für den Programmierenden (Keine ToolTipps)(hier überall Gleiche Beschreibung)
    labelSpielerAnweisungen.setBackground(new Color(0xFFC800));//Hintergundfarbe(hier überall Gleiche Beschreibung)
    labelSpielerAnweisungen.setOpaque(true);//Sichtbarkeit(hier überall Gleiche Beschreibung)
    cp.add(labelSpielerAnweisungen);
    
    optionsButtons[3].setBounds(696, 256, 265, 129);
    optionsButtons[3].setText("Spieler Drei");
    optionsButtons[3].setMargin(new Insets(2, 2, 2, 2));
    optionsButtons[3].addActionListener(new ActionListener() { 
      public void actionPerformed(ActionEvent evt) { 
        jButton1_ActionPerformed(evt);
      }
    });
    cp.add(optionsButtons[3]);
    
    labelAblageAusgabe.setBounds(720, 136, 35, 49);
    labelAblageAusgabe.setText("AblageAusgabe");
    labelAblageAusgabe.setBackground(new Color(0xFFC800));
    labelAblageAusgabe.setOpaque(true);//Sichtbarkeit
    cp.add(labelAblageAusgabe);
    
    labelObersteKarte.setBounds(584, 136, 139, 49);
    labelObersteKarte.setText("Oberste Karte:");
    labelObersteKarte.setBackground(new Color(0xFFC800));
    labelObersteKarte.setOpaque(true);
    cp.add(labelObersteKarte);
    
    labelHandKarten.setBounds(232, 136, 265, 49);
    labelHandKarten.setText("");
    labelHandKarten.setBackground(new Color(0xFFC800));
    labelHandKarten.setOpaque(true);
    cp.add(labelHandKarten);
    
    karteLegenButton.setBounds(240, 256, 265, 129);
    karteLegenButton.setText("Legen");
    karteLegenButton.setMargin(new Insets(2, 2, 2, 2));
    karteLegenButton.addActionListener(new ActionListener() { 
      public void actionPerformed(ActionEvent evt) { 
        karteLegenButton_ActionPerformed(evt);
      }
    });
    cp.add(karteLegenButton);
    
    karteAufnehmenButton.setBounds(552, 256, 265, 129);
    karteAufnehmenButton.setText("Ziehen");
    karteAufnehmenButton.setMargin(new Insets(2, 2, 2, 2));
    karteAufnehmenButton.addActionListener(new ActionListener() { 
      public void actionPerformed(ActionEvent evt) { 
        karteAufnehmenButton_ActionPerformed(evt);
      }
    });
    cp.add(karteAufnehmenButton);
    
    kartenAblageButtons[1].setBounds(50, 400, 100, 50);
    kartenAblageButtons[1].setText("Erste Karte ");
    kartenAblageButtons[1].setMargin(new Insets(2, 2, 2, 2));
    kartenAblageButtons[1].addActionListener(new ActionListener() { 
      public void actionPerformed(ActionEvent evt) { 
        kartenAblageButton1_ActionPerformed(evt);
      }
    });
    cp.add(kartenAblageButtons[1]);
    
    kartenAblageButtons[2].setBounds(152, 400, 100, 50);
    kartenAblageButtons[2].setText("Zweite Karte");
    kartenAblageButtons[2].setMargin(new Insets(2, 2, 2, 2));
    kartenAblageButtons[2].addActionListener(new ActionListener() { 
      public void actionPerformed(ActionEvent evt) { 
        kartenAblageButton2_ActionPerformed(evt);
      }
    });
    cp.add(kartenAblageButtons[2]);
    
    kartenAblageButtons[3].setBounds(256, 400, 100, 50);
    kartenAblageButtons[3].setText("Dritte Karte");
    kartenAblageButtons[3].setMargin(new Insets(2, 2, 2, 2));
    kartenAblageButtons[3].addActionListener(new ActionListener() { 
      public void actionPerformed(ActionEvent evt) { 
        kartenAblageButton3_ActionPerformed(evt);
      }
    });
    cp.add(kartenAblageButtons[3]);
    
    kartenAblageButtons[4].setBounds(360, 400, 100, 50);
    kartenAblageButtons[4].setText("Vierte Karte");
    kartenAblageButtons[4].setMargin(new Insets(2, 2, 2, 2));
    kartenAblageButtons[4].addActionListener(new ActionListener() { 
      public void actionPerformed(ActionEvent evt) { 
        kartenAblageButton4_ActionPerformed(evt);
      }
    });
    cp.add(kartenAblageButtons[4]);
    
    kartenAblageButtons[5].setBounds(464, 400, 100, 50);
    kartenAblageButtons[5].setText("Fünfte Karte");
    kartenAblageButtons[5].setMargin(new Insets(2, 2, 2, 2));
    kartenAblageButtons[5].addActionListener(new ActionListener() { 
      public void actionPerformed(ActionEvent evt) { 
        kartenAblageButton5_ActionPerformed(evt);
      }
    });
    cp.add(kartenAblageButtons[5]);
    
    kartenAblageButtons[6].setBounds(568, 400, 100, 50);
    kartenAblageButtons[6].setText("Sechste Karte");
    kartenAblageButtons[6].setMargin(new Insets(2, 2, 2, 2));
    kartenAblageButtons[6].addActionListener(new ActionListener() { 
      public void actionPerformed(ActionEvent evt) { 
        kartenAblageButton6_ActionPerformed(evt);
      }
    });
    cp.add(kartenAblageButtons[6]);
    
    kartenAblageButtons[7].setBounds(672, 400, 100, 50);
    kartenAblageButtons[7].setText("Siebte Karte");
    kartenAblageButtons[7].setMargin(new Insets(2, 2, 2, 2));
    kartenAblageButtons[7].addActionListener(new ActionListener() { 
      public void actionPerformed(ActionEvent evt) { 
        kartenAblageButton7_ActionPerformed(evt);
      }
    });
    cp.add(kartenAblageButtons[7]);
    
    kartenAblageButtons[8].setBounds(776, 400, 100, 50);
    kartenAblageButtons[8].setText("Achte Karte");
    kartenAblageButtons[8].setMargin(new Insets(2, 2, 2, 2));
    kartenAblageButtons[8].addActionListener(new ActionListener() { 
      public void actionPerformed(ActionEvent evt) { 
        kartenAblageButton8_ActionPerformed(evt);
      }
    });
    cp.add(kartenAblageButtons[8]);
    
    kartenAblageButtons[9].setBounds(880, 400, 100, 50);
    kartenAblageButtons[9].setText("Neunte Karte");
    kartenAblageButtons[9].setMargin(new Insets(2, 2, 2, 2));
    kartenAblageButtons[9].addActionListener(new ActionListener() { 
      public void actionPerformed(ActionEvent evt) { 
        kartenAblageButton9_ActionPerformed(evt);
      }
    });
    cp.add(kartenAblageButtons[9]);
    
    kartenAblageButtons[10].setBounds(984, 400, 100, 50);
    kartenAblageButtons[10].setText("Zehnte Karte");
    kartenAblageButtons[10].setMargin(new Insets(2, 2, 2, 2));
    kartenAblageButtons[10].addActionListener(new ActionListener() { 
      public void actionPerformed(ActionEvent evt) { 
        kartenAblageButton10_ActionPerformed(evt);
      }
    });
    cp.add(kartenAblageButtons[10]);
    
    kartenAblageButtons[11].setBounds(48, 500, 100, 50);
    kartenAblageButtons[11].setText("Elfte Karte");
    kartenAblageButtons[11].setMargin(new Insets(2, 2, 2, 2));
    kartenAblageButtons[11].addActionListener(new ActionListener() { 
      public void actionPerformed(ActionEvent evt) { 
        kartenAblageButton11_ActionPerformed(evt);
      }
    });
    cp.add(kartenAblageButtons[11]);
    
    kartenAblageButtons[12].setBounds(152, 500, 100, 50);
    kartenAblageButtons[12].setText("Zwölfte Karte");
    kartenAblageButtons[12].setMargin(new Insets(2, 2, 2, 2));
    kartenAblageButtons[12].addActionListener(new ActionListener() { 
      public void actionPerformed(ActionEvent evt) { 
        kartenAblageButton12_ActionPerformed(evt);
      }
    });
    cp.add(kartenAblageButtons[12]);
    
    kartenAblageButtons[13].setBounds(256, 500, 100, 50);
    kartenAblageButtons[13].setText("13. Karte");
    kartenAblageButtons[13].setMargin(new Insets(2, 2, 2, 2));
    kartenAblageButtons[13].addActionListener(new ActionListener() { 
      public void actionPerformed(ActionEvent evt) { 
        kartenAblageButton13_ActionPerformed(evt);
      }
    });
    cp.add(kartenAblageButtons[13]);
    
    kartenAblageButtons[14].setBounds(360, 500, 100, 50);
    kartenAblageButtons[14].setText("14. Karte");
    kartenAblageButtons[14].setMargin(new Insets(2, 2, 2, 2));
    kartenAblageButtons[14].addActionListener(new ActionListener() { 
      public void actionPerformed(ActionEvent evt) { 
        kartenAblageButton14_ActionPerformed(evt);
      }
    });
    cp.add(kartenAblageButtons[14]);
    
    kartenAblageButtons[15].setBounds(464, 500, 100, 50);
    kartenAblageButtons[15].setText("15. Karte");
    kartenAblageButtons[15].setMargin(new Insets(2, 2, 2, 2));
    kartenAblageButtons[15].addActionListener(new ActionListener() { 
      public void actionPerformed(ActionEvent evt) { 
        kartenAblageButton15_ActionPerformed(evt);
      }
    });
    cp.add(kartenAblageButtons[15]);
    
    kartenAblageButtons[16].setBounds(568, 500, 100, 50);
    kartenAblageButtons[16].setText("16. Karte");
    kartenAblageButtons[16].setMargin(new Insets(2, 2, 2, 2));
    kartenAblageButtons[16].addActionListener(new ActionListener() { 
      public void actionPerformed(ActionEvent evt) { 
        kartenAblageButton16_ActionPerformed(evt);
      }
    });
    cp.add(kartenAblageButtons[16]);
    
    kartenAblageButtons[17].setBounds(672, 500, 100, 50);
    kartenAblageButtons[17].setText("17. Karte");
    kartenAblageButtons[17].setMargin(new Insets(2, 2, 2, 2));
    kartenAblageButtons[17].addActionListener(new ActionListener() { 
      public void actionPerformed(ActionEvent evt) { 
        kartenAblageButton17_ActionPerformed(evt);
      }
    });
    cp.add(kartenAblageButtons[17]);
    
    kartenAblageButtons[18].setBounds(776, 500, 100, 50);
    kartenAblageButtons[18].setText("18. Karte");
    kartenAblageButtons[18].setMargin(new Insets(2, 2, 2, 2));
    kartenAblageButtons[18].addActionListener(new ActionListener() { 
      public void actionPerformed(ActionEvent evt) { 
        kartenAblageButton18_ActionPerformed(evt);
      }
    });
    cp.add(kartenAblageButtons[18]);
    
    kartenAblageButtons[19].setBounds(880, 500, 100, 50);
    kartenAblageButtons[19].setText("19. Karte");
    kartenAblageButtons[19].setMargin(new Insets(2, 2, 2, 2));
    kartenAblageButtons[19].addActionListener(new ActionListener() { 
      public void actionPerformed(ActionEvent evt) { 
        kartenAblageButton19_ActionPerformed(evt);
      }
    });
    cp.add(kartenAblageButtons[19]);
    
    kartenAblageButtons[20].setBounds(984, 500, 100, 50);
    kartenAblageButtons[20].setText("20. Karte");
    kartenAblageButtons[20].setMargin(new Insets(2, 2, 2, 2));
    kartenAblageButtons[20].addActionListener(new ActionListener() { 
      public void actionPerformed(ActionEvent evt) { 
        kartenAblageButton20_ActionPerformed(evt);
      }
    });
    cp.add(kartenAblageButtons[20]);
    
    bubeSetCircle.setBounds(240, 384, 75, 75);
    bubeSetCircle.setText("°");
    bubeSetCircle.setMargin(new Insets(2, 2, 2, 2));
    bubeSetCircle.addActionListener(new ActionListener() { 
      public void actionPerformed(ActionEvent evt) { 
        bubeSetCircle_ActionPerformed(evt);
      }
    });
    cp.add(bubeSetCircle);
    
    bubeSetPlus.setBounds(430, 384, 75, 75);
    bubeSetPlus.setText("+");
    bubeSetPlus.setMargin(new Insets(2, 2, 2, 2));
    bubeSetPlus.addActionListener(new ActionListener() { 
      public void actionPerformed(ActionEvent evt) { 
        bubeSetPlus_ActionPerformed(evt);
      }
    });
    cp.add(bubeSetPlus);
    
    bubeSetHashtag.setBounds(552, 384, 75, 75);
    bubeSetHashtag.setText("#");
    bubeSetHashtag.setMargin(new Insets(2, 2, 2, 2));
    bubeSetHashtag.addActionListener(new ActionListener() { 
      public void actionPerformed(ActionEvent evt) { 
        bubeSetHashtag_ActionPerformed(evt);
      }
    });
    cp.add(bubeSetHashtag);
    
    bubeSetStar.setBounds(742, 384, 75, 75);
    bubeSetStar.setText("*");
    bubeSetStar.setMargin(new Insets(2, 2, 2, 2));
    bubeSetStar.addActionListener(new ActionListener() { 
      public void actionPerformed(ActionEvent evt) { 
        bubeSetStar_ActionPerformed(evt);
      }
    });
    cp.add(bubeSetStar);
    
    labelTextHandkarten.setBounds(160, 136, 75, 49);
    labelTextHandkarten.setText("Handkarten: ");
    labelTextHandkarten.setBackground(new Color(0xFFC800));
    labelTextHandkarten.setOpaque(true);
    cp.add(labelTextHandkarten);
    
    labelInfoTextGezogen.setBounds(784, 136, 163, 49);
    labelInfoTextGezogen.setText("Karte gezogen");
    labelInfoTextGezogen.setBackground(new Color(0xFFC800));
    labelInfoTextGezogen.setOpaque(true);
    cp.add(labelInfoTextGezogen);
    
    neuStartButton.setBounds(144, 216, 265, 129);
    neuStartButton.setText("Neustart");
    neuStartButton.setMargin(new Insets(2, 2, 2, 2));
    neuStartButton.addActionListener(new ActionListener() { 
      public void actionPerformed(ActionEvent evt) { 
        neuStartButton_ActionPerformed(evt);
      }
    });
    cp.add(neuStartButton);
    
    beendeenButton.setBounds(656, 216, 265, 129);
    beendeenButton.setText("Beenden");
    beendeenButton.setMargin(new Insets(2, 2, 2, 2));
    beendeenButton.addActionListener(new ActionListener() { 
      public void actionPerformed(ActionEvent evt) { 
        beendeenButton_ActionPerformed(evt);
      }
    });
    cp.add(beendeenButton);
    
    LabelTextWinner.setBounds(296, 368, 491, 161);
    LabelTextWinner.setText("SpielerWin");
    LabelTextWinner.setBackground(Color.YELLOW);
    LabelTextWinner.setOpaque(true);
    cp.add(LabelTextWinner);
    // Ende Komponenten
    
    setVisible(true);
  } // end of public GameFrame
  
  // Anfang Methoden
  
  public static void main(String[] args) {//Main Methde (/Start-/Haupt-)
    new GameFrame("GameFrame");//Initialisierung des Fensters 
    Game game = new Game();//Initialisierung der Methode Game
  } // end of main
  
  public void jButton2_ActionPerformed(ActionEvent evt) {
    if(pressCounter== 0){//Prüft ob der Knopf bereits in Gebrauch war (hier überall Gleiche Beschreibung)
      Game.input= 2;//Setzt input auf 2 um die Option in der nachfolgenden Bedingung/Abfrage in richtung "Zwei Spieler" abbiegen zu lassen
      Game.interagiert= true;//Setzt die (Nachfolgende) Bedingung der "Warteschleife" auf erfüllt (Hält die Threads Synchron da sonst Game zu schnell agieren würde)(hier überall Gleiche Beschreibung)
    }
    
    if (pressCounter== 1) {//Wenn der Knopf bereits in Gebrauch war wurde der Code in der Vorrangegangenen Verzweigung bereits konfiguriert bzw soll nun etwas anderes konfiguriert werden
      Game.input= 1;//Setzt input auf 1 um die Option in der nachfolgenden Bedingung/Abfrage in richtung "Spieler 1 beginnt" abbiegen zu lassen
      Game.interagiert= true;
    } // end of if
    
  } // end of jButton2_ActionPerformed
  
  public void jButton3_ActionPerformed(ActionEvent evt) {
    if(pressCounter== 0){
      Game.input= 3;//Lässt(Nachfolgende)Bedingung in Richtung "Drei Spieler" abzweigen
      Game.interagiert= true;
    }
    
    if (pressCounter== 1) {
      Game.input= 2;//Lässt die nachfolgende Bedingung in Richtung "Spieler 2 beginnt" abbiegen
      Game.interagiert= true;     
    } // end of if
    
  } // end of jButton3_ActionPerformed
  
  public void jButton1_ActionPerformed(ActionEvent evt) {
    if (pressCounter== 1) {  
      Game.input= 3;//Lässt die nachfolgende Bedingung in Richtung "Spieler 3 beginnt" abbiegen   
      Game.interagiert= true;
    } // end of if
  } // end of jButton1_ActionPerformed
  
  public void karteLegenButton_ActionPerformed(ActionEvent evt) {
    Game.input=1;//Lässt die nachfolgende Bedingung das Ablegen einer Karte ansteuern
    karteLegenButton.setVisible(false);//Verbirgt karteLegenButton(Hier wiederholen sich die erklärungen ebenfalls (Lediglich variablennamen ändern sich)) 
    karteAufnehmenButton.setVisible(false);//Verbirgt karteAufnehmenButton
    Game.interagiert= true;     
  } // end of karteLegenButton_ActionPerformed
  
  public void karteAufnehmenButton_ActionPerformed(ActionEvent evt) {
    Game.input=2;//Lässt die nachfolgende Bedingung das aufnehmen einer Karte zur Folge haben
    karteAufnehmenButton.setVisible(false);
    karteLegenButton.setVisible(false);
    Game.interagiert= true;
  } // end of karteAufnehmenButton_ActionPerformed
  
  public void kartenAblageButton1_ActionPerformed(ActionEvent evt) {
    Game.input=1;//Setzt input auf 1, womit die Nachfolgene Abfrage das Enthüllen des Knopfes(kartenAblageButtons[1]) zur Folge hat(Beschreibung hier fast identisch lediglich jew. ein Knopf mehr Pro gehaltener Karte)
    
    for(int i=1; i<=20; i++){
    	GameFrame.kartenAblageButtons[i].setVisible(false);
    }
    
    Game.interagiert= true;
  } // end of kartenAblageButton1_ActionPerformed
  
  public void kartenAblageButton2_ActionPerformed(ActionEvent evt) {
    Game.input=2;//Setzt input auf 2, womit die Nachfolgene Abfrage das Enthüllen des Knopfes selbst(kartenAblageButtons[2]) und das Enthüllen des Vorangengangenen(kartenAblageButtons[1]) zur Folge hat(Beschreibung hier fast identisch lediglich jew. ein Knopf mehr Pro gehaltener Karte)
    
    for(int i=1; i<=20; i++){
    	GameFrame.kartenAblageButtons[i].setVisible(false);
    }
    
    Game.interagiert= true;
  } // end of kartenAblageButton2_ActionPerformed
  
  public void kartenAblageButton3_ActionPerformed(ActionEvent evt) {
    Game.input=3;//Setzt input auf 3, womit die Nachfolgene Abfrage das Enthüllen des Knopfes selbst(kartenAblageButtons[3]) und das Enthüllen des Vorangengangenen(kartenAblageButtons[2]), sowie wiederum dessen vorgänger zur Folge(bis kartenAblageButtons[1]) hat(Beschreibung hier fast identisch lediglich jew. ein Knopf mehr Pro gehaltener Karte)(wie erwähn wiederholt sich das Prozedere und wird deshalb nicht einzeln Beschriftet)

    for(int i=1; i<=20; i++){
    	GameFrame.kartenAblageButtons[i].setVisible(false);
    }
    
    Game.interagiert= true;
  } // end of kartenAblageButton3_ActionPerformed
  
  public void kartenAblageButton4_ActionPerformed(ActionEvent evt) {
    Game.input=4;

    for(int i=1; i<=20; i++){
    	GameFrame.kartenAblageButtons[i].setVisible(false);
    }
    
    Game.interagiert= true;
  } // end of kartenAblageButton4_ActionPerformed
  
  public void kartenAblageButton5_ActionPerformed(ActionEvent evt) {
    Game.input=5;

    for(int i=1; i<=20; i++){
    	GameFrame.kartenAblageButtons[i].setVisible(false);
    }
    
    Game.interagiert= true;
  } // end of kartenAblageButton5_ActionPerformed
  
  public void kartenAblageButton6_ActionPerformed(ActionEvent evt) {
    Game.input=6;
    
    for(int i=1; i<=20; i++){
    	GameFrame.kartenAblageButtons[i].setVisible(false);
    }
    
    Game.interagiert= true;
  } // end of kartenAblageButton6_ActionPerformed
  
  public void kartenAblageButton7_ActionPerformed(ActionEvent evt) {
    Game.input=7;
    
    for(int i=1; i<=20; i++){
    	GameFrame.kartenAblageButtons[i].setVisible(false);
    }

    Game.interagiert= true;
  } // end of kartenAblageButton7_ActionPerformed
  
  public void kartenAblageButton8_ActionPerformed(ActionEvent evt) {
    Game.input=8;
    
    for(int i=1; i<=20; i++){
    	GameFrame.kartenAblageButtons[i].setVisible(false);
    }
   
    Game.interagiert= true;
  } // end of kartenAblageButton8_ActionPerformed
  
  public void kartenAblageButton9_ActionPerformed(ActionEvent evt) {
    Game.input=9;
    
    for(int i=1; i<=20; i++){
    	GameFrame.kartenAblageButtons[i].setVisible(false);
    }
   
    Game.interagiert= true;
  } // end of kartenAblageButton9_ActionPerformed
  
  public void kartenAblageButton10_ActionPerformed(ActionEvent evt) {
    Game.input=10;
    
    for(int i=1; i<=20; i++){
    	GameFrame.kartenAblageButtons[i].setVisible(false);
    }
    
    Game.interagiert= true;
  } // end of kartenAblageButton10_ActionPerformed
  
  public void kartenAblageButton11_ActionPerformed(ActionEvent evt) {
    Game.input=11;
    
    for(int i=1; i<=20; i++){
    	GameFrame.kartenAblageButtons[i].setVisible(false);
    }
    
    Game.interagiert= true;
  } // end of kartenAblageButton11_ActionPerformed
  
  public void kartenAblageButton12_ActionPerformed(ActionEvent evt) {
    Game.input=12;
    
    for(int i=1; i<=20; i++){
    	GameFrame.kartenAblageButtons[i].setVisible(false);
    }
    
    Game.interagiert= true;
  } // end of kartenAblageButton12_ActionPerformed
  
  public void kartenAblageButton13_ActionPerformed(ActionEvent evt) {
    Game.input=13;
    
    for(int i=1; i<=20; i++){
    	GameFrame.kartenAblageButtons[i].setVisible(false);
    }
    
    Game.interagiert= true;
  } // end of kartenAblageButton13_ActionPerformed
  
  public void kartenAblageButton14_ActionPerformed(ActionEvent evt) {
    Game.input=14;
    
    for(int i=1; i<=20; i++){
    	GameFrame.kartenAblageButtons[i].setVisible(false);
    }
    
    Game.interagiert= true;
  } // end of kartenAblageButton14_ActionPerformed
  
  public void kartenAblageButton15_ActionPerformed(ActionEvent evt) {
    Game.input=15;
    
    for(int i=1; i<=20; i++){
    	GameFrame.kartenAblageButtons[i].setVisible(false);
    }
    
    Game.interagiert= true;
  } // end of kartenAblageButton15_ActionPerformed
  
  public void kartenAblageButton16_ActionPerformed(ActionEvent evt) {
    Game.input=16;
    
    for(int i=1; i<=20; i++){
    	GameFrame.kartenAblageButtons[i].setVisible(false);
    }
    
    Game.interagiert= true;
  } // end of kartenAblageButton16_ActionPerformed
  
  public void kartenAblageButton17_ActionPerformed(ActionEvent evt) {
    Game.input=17;
    
    for(int i=1; i<=20; i++){
    	GameFrame.kartenAblageButtons[i].setVisible(false);
    }
    
    Game.interagiert= true;
  } // end of kartenAblageButton17_ActionPerformed
  
  public void kartenAblageButton18_ActionPerformed(ActionEvent evt) {
    Game.input=18;
    
    for(int i=1; i<=20; i++){
    	GameFrame.kartenAblageButtons[i].setVisible(false);
    }
    
    Game.interagiert= true;
  } // end of kartenAblageButton18_ActionPerformed
  
  public void kartenAblageButton19_ActionPerformed(ActionEvent evt) {
    Game.input=19;
    
    for(int i=1; i<=20; i++){
    	GameFrame.kartenAblageButtons[i].setVisible(false);
    }
    
    Game.interagiert= true;
  } // end of kartenAblageButton19_ActionPerformed
  
  public void kartenAblageButton20_ActionPerformed(ActionEvent evt) {
    Game.input=20;//Letzter in der Kette der vorangegangenen Knöpfe(bis einschließlich kartenAblageButtons[1]) und somit die selbe funktion
   
    
    for(int i=1; i<=20; i++){
    	GameFrame.kartenAblageButtons[i].setVisible(false);
    }
    
    Game.interagiert= true;
  } // end of kartenAblageButton20_ActionPerformed
  
  public void bubeSetCircle_ActionPerformed(ActionEvent evt) {
    Game.bubenInput= 1;//Setzt den bubenInput auf 1 was in der Nachfolgenden Bedingung eine Auswahl des Kartentypus "°" zur Folge hat 
    GameFrame.bubeSetCircle.setVisible(false);
    GameFrame.bubeSetPlus.setVisible(false);
    GameFrame.bubeSetHashtag.setVisible(false);
    GameFrame.bubeSetStar.setVisible(false);
    Game.interagiert= true;
  } // end of bubeSetCircle_ActionPerformed
  
  public void bubeSetPlus_ActionPerformed(ActionEvent evt) {
    Game.bubenInput= 2;//Setzt den bubenInput auf 1 was in der Nachfolgenden Bedingung eine Auswahl des Kartentypus "+" zur Folge hat 
    GameFrame.bubeSetCircle.setVisible(false);
    GameFrame.bubeSetPlus.setVisible(false);
    GameFrame.bubeSetHashtag.setVisible(false);
    GameFrame.bubeSetStar.setVisible(false);
    Game.interagiert= true;
  } // end of bubeSetPlus_ActionPerformed
  
  public void bubeSetHashtag_ActionPerformed(ActionEvent evt) {
    Game.bubenInput= 3;//Setzt den bubenInput auf 1 was in der Nachfolgenden Bedingung eine Auswahl des Kartentypus "#" zur Folge hat 
    GameFrame.bubeSetCircle.setVisible(false);
    GameFrame.bubeSetPlus.setVisible(false);
    GameFrame.bubeSetHashtag.setVisible(false);
    GameFrame.bubeSetStar.setVisible(false);
    Game.interagiert= true;
  } // end of bubeSetHashtag_ActionPerformed
  
  public void bubeSetStar_ActionPerformed(ActionEvent evt) {
    Game.bubenInput= 4;//Setzt den bubenInput auf 1 was in der Nachfolgenden Bedingung eine Auswahl des Kartentypus "*" zur Folge hat 
    GameFrame.bubeSetCircle.setVisible(false);
    GameFrame.bubeSetPlus.setVisible(false);
    GameFrame.bubeSetHashtag.setVisible(false);
    GameFrame.bubeSetStar.setVisible(false);
    Game.interagiert= true;
  } // end of bubeSetStar_ActionPerformed
  
  public void neuStartButton_ActionPerformed(ActionEvent evt) {
    Game.input= 1;//Richtet die nachfolgende Bedingung auf "Neustart" aus 
    GameFrame.neuStartButton.setVisible(false);
    GameFrame.beendeenButton.setVisible(false);
    Game.interagiert= true;
  } // end of neuStartButton_ActionPerformed
  
  public void beendeenButton_ActionPerformed(ActionEvent evt) {
    Game.input= 2;//Richtet die nachfolgende Bedingung auf "Spiel Beenden" aus
    GameFrame.neuStartButton.setVisible(false);
    GameFrame.beendeenButton.setVisible(false);
    Game.interagiert= true;      
  } // end of beendeenButton_ActionPerformed
  
  // Ende Methoden
} // end of class GameFrame
