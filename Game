import java.util.*;

public class Game {
	private Scanner scanner = new Scanner(System.in);  //Erzeugung eines Scanners aus java.util.
	private int aktuell; //Aktueller Spieler
	private int max; //Spieleranzahl
	private int handkarten; //Zahl der Handkarten eines Spielers
	private int counter; //Zählvariable für die Methode "pruefen()"
	private int bubenInput; //Für die Auswahl eines gewünschten Zeichens, nachdem ein "Bube" gelegt wurde.
	private int sevenStack = 0; //Zählt, wie viele Karten der aktuelle Spieler ziehen muss,  nachdem eine oder mehrere "7er" gelegt wurden.
	private boolean win; //Prüft, ob ein Spieler gewonnen hat.
	private boolean seven; //Prüft, ob im vorherigen Zug eine "7" gelegt wurde.
	private boolean eight; //Prüft, ob im vorherigen Zug eine "8" gelegt wurde.
	private boolean bube; //Prüft, ob im vorherigen Zug ein "Bube" gelegt wurde.
	private boolean bubeError; //Prüft, ob bei dem Neustart eines Zuges (aufgrund einer fehlerhaften Eingabe) die Variable "bube" auf "true" war, um sie ggf. erneut auf "true" zu setzen.
	static boolean draw; //Prüft, ob das Spiel unentschieden ausgegangen ist.
	static boolean bubeException; //Beugt Fehler vor, die am Beginn und am Ende des Spiels mit einer "Buben-Karte" aufkommen würden.
	static char bubeChar; //Das gewünschte "Zeichen", das ausgewählt wird, nachdem ein "Bube" gelegt wurde.
	private Hand spieler; //"Hand" des aktuellen Spielers
	private Karte current; //Zählnode für die Methoden "zug()" und "special()"
	private Kartenstapel kartenstapel = new Kartenstapel(); //Erzeugung eines neuen "Kartendecks", von dem alle Karten gezogen werden.

	//Objekt, das bei der Erzeugung das Spiel startet:
	public Game() {
		konfiguration();
	}

	//Konfiguration des Spiels:
	private void konfiguration() {
		
		//Auswahl der Spieleranzahl:
		System.out.println("Bitte wählen Sie die Spieleranzahl! (2/3)");
		int input = scanner.nextInt(); //Nächste Tasteneingabe wird eingelesen.
		Matchconfig.setSpielerzahl(input); //Änderung der Spieleranzahl in der class "Matchconfig".
		max = input; //Der Variable "max" wird die Spieleranzahl zugewiesen.

		//Auswahl des Spielers, der als erstes dran ist - basierend auf der Spieleranzahl:
		if (input < 3 || input > 1) { //Prüft, ob die Spieleranzahl entweder den Wert "2" oder "3" beträgt.
			if (max == 2) {
				System.out.println("Welcher Spieler soll starten? (1/2)");
				input = scanner.nextInt(); //Nächste Tasteneingabe wird eingelesen.
			}
			if (max == 3) {
				System.out.println("Welcher Spieler soll starten? (1/2/3)");
				input = scanner.nextInt(); //Nächste Tasteneingabe wird eingelesen.
			}
		} else { //Wenn die Spieleranzahl kleiner als "2" oder größer als "3" ist, wird die Konfiguration neugestartet:
			kartenstapel.mischen(); //Da ansonsten Fehler aufgekommen sind, wird bei einem Neustart der Konfiguration immer der "kartenstapel" neu gemischt.
			konfiguration();
		} 
		if (input <= max) { //Prüft, ob ein brauchbarer Wert für den Startspieler eingegeben wurde. 
			System.out.println("-------------------------");
			System.out.println();
			aktuell = input; //Der Variable "aktuell" wird der Startspieler / aktuelle Spieler zugewiesen.
			kartenstapel.austeilen(); //Die Karten werden an die Spieler ausgeteilt.
		} else { //Wenn bei der Auswahl des Startspielers ein unbrauchbarer Wert eingegeben wurde, wird die Konfiguration neugestartet:
			kartenstapel.mischen();
			konfiguration();
		}
		if (Ablage.ablage.peek().charAt(1) == 'B') { //Wenn auf der "ablage" ein Bube liegt, wird die Variable "BubeException" auf "true" gesetzt, damit im Verlauf des Zuges kein Fehler auftritt:
		    bubeException = true; 
		}
		win = false; //Zu Spielbeginn wird die Variable "win" auf "false" gesetzt, weil noch keiner gewonnen hat.
		draw = false; //Zu Spielbeginn wird die Variable "win" auf "false" gesetzt, weil noch kein Unentschieden entstanden ist.
		start(); //Das Spiel wird gestartet.
	}

	//Startet das eigentliche Spiel:
	private void start() { 

		//Prüft, ob der vorherige Spieler eine "8" gelegt hat:
		if (eight == true) { //Wenn die Variable "eight" auf "true" ist, wird der aktuelle Spieler übersprungen und der nächste Spieler ist dran:
			if (aktuell != max) { //Prüft, ob die Variable "akutell" die maximale Spieleranzahl überschreitet.
				aktuell++;
			} else { //Wenn die Variable "aktuell" über die maximale Spieleranzahl herausschreitet, wird sie auf 1 zurückgesetzt: 
				aktuell = 1;
			}
			eight = false; //Die Variable "eight" wird wieder auf "false" gesetzt, wenn sie auf "true" war.
		}
		System.out.println("Spieler " + aktuell + ", machen Sie bitte Ihren Zug!"); //Der aktuelle Spieler wird aufgefordert, seinen Zug zu machen.

		//Prüft, ob die Spieleranzahl 2 oder 3 ist:
		if (max == 2) {
			
			//Prüft, welcher Spieler aktuell am Zug ist:
			if (aktuell == 1) { 
				handkarten = Hand.hand1.size(); //Der Variable "handkarten" wird die Anzahl der Karten auf "hand1" aus der Klasse "Hand" zugewiesen.
				spieler = Hand.hand1; //Der Variable "spieler" wird die Hand "hand1" aus der Klasse "Hand" zugewiesen.
			}
			if (aktuell == 2) {
				handkarten = Hand.hand2.size(); //Der Variable "handkarten" wird die Anzahl der Karten auf "hand2" aus der Klasse "Hand" zugewiesen.
				spieler = Hand.hand2; //Der Variable "spieler" wird die Hand "hand2" aus der Klasse "Hand" zugewiesen.
			}
		} else {
			
			//Prüft, welcher Spieler aktuell am Zug ist:
			if (aktuell == 1) {
				handkarten = Hand.hand1.size(); //Der Variable "handkarten" wird die Anzahl der Karten auf "hand1" aus der Klasse "Hand" zugewiesen.
				spieler = Hand.hand1; //Der Variable "spieler" wird die Hand "hand1" aus der Klasse "Hand" zugewiesen.
			}
			if (aktuell == 2) {
				handkarten = Hand.hand2.size(); //Der Variable "handkarten" wird die Anzahl der Karten auf "hand2" aus der Klasse "Hand" zugewiesen.
				spieler = Hand.hand2; //Der Variable "spieler" wird die Hand "hand2" aus der Klasse "Hand" zugewiesen.
			}
			if (aktuell == 3) {
				handkarten = Hand.hand3.size(); //Der Variable "handkarten" wird die Anzahl der Karten auf "hand3" aus der Klasse "Hand" zugewiesen.
				spieler = Hand.hand3; //Der Variable "spieler" wird die Hand "hand3" aus der Klasse "Hand" zugewiesen.
			}
		}
		
		//Die Werte der Handkarten und der Wert der obersten "Karte" auf der "ablage" werden ausgegeben:
		System.out.println();
		System.out.print("[Handkarten]: ");
		spieler.ausgeben(); //Gibt die Kartenwerte auf der "Hand" des aktuellen Spielers aus.
		System.out.print("[Aktuell]: ");
		
		//Prüft, ob die Variable "bube" auf "true" ist:
		if (bube != true) { //Wenn die Variable "bube" auf "false" ist, wird ganz normal die oberste "Karte" auf der "ablage" ausgegeben:
			Ablage.ablage.ausgeben(); 
		} else { //Wenn die Variable "bube" auf true ist, wird lediglich der vom vorherigen Spieler ausgewählte String "bubeChar" angegeben:
			System.out.println(bubeChar); //Ausgewähltes Symbol (String) des vorherigen Spielers wird ausgegeben.
			System.out.println();
		}
		counterSeven();

		//Nach dem Zug wird der Spieler gewechselt:
		if (aktuell != max) { //Prüft, ob die Variable "akutell" die maximale Spieleranzahl überschreitet.
			aktuell++; 
		} else { //Wenn die Variable "aktuell" über die maximale Spieleranzahl herausschreitet, wird sie auf 1 zurückgesetzt: 
			aktuell = 1;
		}
		System.out.println();

		//Prüft, ob ein Spieler 0 "Karten" auf seiner "Hand" hat:
		if (max == 2) {
			if (Hand.hand1.size() == 0 || Hand.hand2.size() == 0) {
				win = true; //Wenn einer der Spieler keine "Karten" mehr hat, wird die Variable "win" auf "true" gesetzt.
			}
		}
		if (max == 3) {
			if (Hand.hand1.size() == 0 || Hand.hand2.size() == 0 || Hand.hand3.size() == 0) {
				win = true; //Wenn einer der Spieler keine "Karten" mehr hat, wird die Variable "win" auf "true" gesetzt.
			}
		}
		win(); //Prüft, ob die Variable "win" auf "true" ist und beendet ggf. das Spiel.
	}

	//Zieht eine "Karte" vom "kartenstapel" und fügt sie bei dem aktuellen Spieler auf der "Hand" hinzu:
	private void ziehenAlle() {
		if (Kartenstapel.kartenstapel.empty() == false && sevenStack <= Kartenstapel.kartenstapel.size()) { // Prüft, ob der "kartenstapel" leer ist, bzw. der "seveStack" mehr Karten benötigt, als noch im "kartenstapel" vorhanden sind:

			// Prüft, ob der vorherige Spieler eine "7" gelegt hat:
			if (seven == true) { // Wenn die Variable "seven" auf "true" ist, zieht der aktuelle Spieler zwei "Karten":
				for (int i = 0; i < sevenStack; i++) { // Eine "For-Schleife" mit so vielen Durchgängen wie auf der Variable "sevenStack" gespeichert sind:
					if (aktuell == 1) {
						Hand.hand1.ziehen(); // Nimmt eine "Karte" aus dem "kartenstapel" und fügt sie der Hand "hand1" hinzu.
					}
					if (aktuell == 2) {
						Hand.hand2.ziehen(); // Nimmt eine "Karte" aus dem "kartenstapel" und fügt sie der Hand "hand2" hinzu.
					}
					if (aktuell == 3) {
						Hand.hand3.ziehen(); // Nimmt eine "Karte" aus dem "kartenstapel" und fügt sie der Hand "hand3" hinzu.
					}
				}
			} else { // Wenn die Variable "seven" auf "false" ist, zieht der aktuelle Spieler eine "Karte":
				if (aktuell == 1) {
					Hand.hand1.ziehen(); // Nimmt eine "Karte" aus dem "kartenstapel" und fügt sie der Hand "hand1" hinzu.
				}
				if (aktuell == 2) {
					Hand.hand2.ziehen(); // Nimmt eine "Karte" aus dem "kartenstapel" und fügt sie der Hand "hand2" hinzu.
				}
				if (aktuell == 3) {
					Hand.hand3.ziehen(); // Nimmt eine "Karte" aus dem "kartenstapel" und fügt sie der Hand "hand3" hinzu.
				}
			}
		} else { // Wenn der "kartenstapel" leer ist, wird er "aufgefüllt" und danach werden erst die "Karten" gezogen:
			kartenstapel.reuse(); // Die "Karten" der "ablage" werden auf den "Kartenstapel" übertragen und gemischt. Die oberste "Karte" der "ablage" bleibt hierbei liegen.
			if (draw == false) {
				if (seven == true) { // Wenn die Variable "seven" auf "true" ist, zieht der aktuelle Spieler zwei "Karten":
					for (int i = 0; i < sevenStack; i++) { // Eine "For-Schleife" mit so vielen Durchgängen wie auf der Variable "sevenStack" gespeichert sind:
						if (aktuell == 1) {
							Hand.hand1.ziehen(); // Nimmt eine "Karte" aus dem "kartenstapel" und fügt sie der Hand "hand1" hinzu.
						}
						if (aktuell == 2) {
							Hand.hand2.ziehen(); // Nimmt eine "Karte" aus dem "kartenstapel" und fügt sie der Hand "hand1" hinzu.
						}
						if (aktuell == 3) {
							Hand.hand3.ziehen(); // Nimmt eine "Karte" aus dem "kartenstapel" und fügt sie der Hand "hand1" hinzu.
						}
					}
				} else { // Wenn die Variable "seven" auf "false" ist, zieht der aktuelle Spieler eine "Karte":
					if (aktuell == 1) {
						Hand.hand1.ziehen(); // Nimmt eine "Karte" aus dem "kartenstapel" und fügt sie der Hand "hand1" hinzu.
					}
					if (aktuell == 2) {
						Hand.hand2.ziehen(); // Nimmt eine "Karte" aus dem "kartenstapel" und fügt sie der Hand "hand1" hinzu.
					}
					if (aktuell == 3) {
						Hand.hand3.ziehen(); // Nimmt eine "Karte" aus dem "kartenstapel" und fügt sie der Hand "hand1" hinzu.
					}
				}
			} else {
				win();
			}
		}
		if (draw = false) {
			System.out.println("-------------------------");
			if (seven == true) {
				System.out.println();
				System.out.println("[Zug]: '" + sevenStack + " Karten gezogen'");
				System.out.println();
			} else {
				System.out.println();
				System.out.println("[Zug]: 'Karte gezogen'");
				System.out.println();
			}
			System.out.println("-------------------------");
		}
	}

	//Prüft, ob der aktuelle Spieler mindestens eine "Karte" legen kann:
	private void pruefen() { 
		if (aktuell == 1) {
			counter = 0; //Weist der Variable "counter" den Wert "0" zu.
			Karte pruefe = Hand.hand1.head; //Erzeugt eine "Karte" "pruefe" und setzt sie mit dem "head" von "hand1" gleich.
			
			//Läuft durch jede "Karte" von "hand1" durch:
			for (int i = 0; i < handkarten; i++) {
				
				//Wenn der Wert einer Handkarte mit dem Wert der oberen "Karte" auf der "ablage" kompatibel ist, wird der Wert von "counter" um "1" erhöht.
				if (Hand.hand1.vergleich(pruefe) == true) { 
					counter++;
				}
				pruefe = pruefe.next;
			}
		}
		if (aktuell == 2) {
			counter = 0; //Weist der Variable "counter" den Wert "0" zu.
			Karte pruefe = Hand.hand2.head; //Erzeugt eine "Karte" "pruefe" und setzt sie mit dem "head" von "hand2" gleich.
			
			//Läuft durch jede "Karte" von "hand1" durch:
			for (int i = 0; i < handkarten; i++) {
				
				//Wenn der Wert einer Handkarte mit dem Wert der oberen "Karte" auf der "ablage" kompatibel ist, wird der Wert von "counter" um "1" erhöht.
				if (Hand.hand2.vergleich(pruefe) == true) {
					counter++;
				}
				pruefe = pruefe.next;
			}
		}
		if (aktuell == 3) {
			counter = 0; //Weist der Variable "counter" den Wert "0" zu.
			Karte pruefe = Hand.hand3.head; //Erzeugt eine "Karte" "pruefe" und setzt sie mit dem "head" von "hand3" gleich.
			
			//Läuft durch jede "Karte" von "hand1" durch:
			for (int i = 0; i < handkarten; i++) {
				
				//Wenn der Wert einer Handkarte mit dem Wert der oberen "Karte" auf der "ablage" kompatibel ist, wird der Wert von "counter" um "1" erhöht.
				if (Hand.hand3.vergleich(pruefe) == true) {
					counter++;
				}
				pruefe = pruefe.next;
			}
		}
	}

	//Startet den Zug des aktuellen Spielers:
	private void zug() { 
		if (counter > 0) { //Prüft, ob die Variable "counter" größer als "0" ist (d.h. ob mindestens eine kompatible "Karte" gelegt werden kann).
			if (seven == true) { //Prüft, ob im vorherigen Zug eine "Karte" mit dem Wert "7" gelegt wurde:
				ziehenAlle(); //Der aktuelle Spieler zieht mehrere "Karten" vom "Kartenstapel", weil sein Vorgänger eine "7" gelegt hat.
				System.out.println();
				System.out.print("[Handkarten]: ");
				spieler.ausgeben(); //Ausgabe aller "Karten" auf der "Hand" des aktuellen Spielers.
				System.out.println();
				seven = false; //Die Variable "seven" wird wieder auf "false" gesetzt, da der aktuelle Spieler bereits 2 "Karten" gezogen hat.
			}
			System.out.println("[Zug]: 'Ich lege eine Karte' / 'Ich ziehe eine Karte' (1/2)");
			int input = scanner.nextInt(); //Nächste Tasteneingabe wird eingelesen.

			if (input < 3) { //Prüft, ob ein brauchbarer Wert für den Zug eingegeben wurde.
				if (input == 1) { 
					System.out.println("-------------------------");
					System.out.println();
					System.out.print("[Aktuell]: ");
					if (bube != true) { //Wenn kein "Bube" oben auf der "ablage" liegt, wird ganz normal die oberste "Karte" auf der "ablage" ausgegeben:
						Ablage.ablage.ausgeben();
					} else { //Wenn die Variable "bube" auf true ist, wird lediglich der erste "char" des Kartenwerts angegeben, weil der zweite egal ist:
						System.out.println(bubeChar); //Erster "char" des Kartenwerts.
						System.out.println();
						bube = false; //Die Variable "bube" wird wieder auf "false" gesetzt, da der Wert der Variable "bubeChar" bereits ausgegeben wurde.
						bubeError = true; //Die Variable "bubeError" wird auf "true" gesetzt, um Fehlern bei einer falschen Eingabe vorzubeugen. 
					}
					
					//Auswahl der "Karte", die gelegt werden soll:
					System.out.print("[Zug]: 'Ich lege Karte (");
					if (aktuell == 1) {
						current = Hand.hand1.head.next;
						for (int i = 0; i < Hand.hand1.size(); i++) { //Ausgabe der Handkarten des aktuellen Spielers:
							System.out.print(i + 1 + ": [" + current.element+ "]");
							if (i != Hand.hand1.size() - 1) { //Zwischen jedem Kartenwert wird ein "/" eingefügt:
								System.out.print(" / ");
							}
							current = current.next; //"current.next" wird bei jedem Durchlauf zu "current", damit die nächste Karte ausgegeben wird.
						}
					}
					if (aktuell == 2) {
						current = Hand.hand2.head.next;
						for (int i = 0; i < Hand.hand2.size(); i++) { //Ausgabe der Handkarten des aktuellen Spielers:
							System.out.print(i + 1 + ": [" + current.element + "]");
							if (i != Hand.hand2.size() - 1) { //Zwischen jedem Kartenwert wird ein "/" eingefügt:
								System.out.print(" / "); 
							}
							current = current.next; //"current.next" wird bei jedem Durchlauf zu "current", damit die nächste Karte ausgegeben wird.
						}
					}
					if (aktuell == 3) {
						current = Hand.hand3.head.next;
						for (int i = 0; i < Hand.hand3.size(); i++) { //Ausgabe der Handkarten des aktuellen Spielers:
							System.out.print(i + 1 + ": [" + current.element + "]");
							if (i != Hand.hand3.size() - 1) { //Zwischen jedem Kartenwert wird ein "/" eingefügt:
								System.out.print(" / ");
							}
							current = current.next; //"current.next" wird bei jedem Durchlauf zu "current", damit die nächste Karte ausgegeben wird.
						}
					}
					System.out.print(")'");
					System.out.println();
					input = scanner.nextInt(); //Nächste Tasteneingabe wird eingelesen.
					System.out.println("-------------------------");

					if (input <= spieler.size()) { //Prüft, ob ein brauchbarer Wert für den Zug eingegeben wurde.
						if (aktuell == 1) {
							current = Hand.hand1.head;
							for (int i = 0; i < input - 1; i++) { //Läuft vom "head" der "Hand" des aktuellen Spielers bis zur ausgewählten "Karte":
								current = current.next;
							}
							
							//Prüft, ob die ausgewählte "Karte" überhaupt gelegt werden kann:
							if (Hand.hand1.vergleich(current) == true) { 
								special(); //Prüft, ob die ausgewählte "Karte" einen Spezialeffekt (7/8/Bube) hat.
								Hand.hand1.legen(current); //Legt die ausgewählte "Karte" auf die "ablage".
							} else { //Wenn die ausgewählte "Karte" nicht gelegt werden kann, wird der aktuelle Zug noch einmal neu gestartet:
								if (bubeError != true) { //Prüft, ob die Variable "bubeError" auf "true" ist. 
									System.out.println();
									start(); //Neustart des gesamten Zuges durch Aufrufen der Methode "start()".
								} else { //Wenn die Variable "bubeError" auf "true" ist, muss die Variable "bube" ebenfalls noch einmal auf "true" gesetzt werden, da der aktuelle Zug danach neustartet. 
									System.out.println();
									bube = true; 
									start(); //Neustart des gesamten Zuges durch Aufrufen der Methode "start()".
								}
							}
						}
						if (aktuell == 2) {
							current = Hand.hand2.head;
							for (int i = 0; i < input - 1; i++) { //Läuft vom "head" der "Hand" des aktuellen Spielers bis zur ausgewählten "Karte":
								current = current.next;
							}
							
							//Prüft, ob die ausgewählte "Karte" überhaupt gelegt werden kann:
							if (Hand.hand2.vergleich(current) == true) {
								special(); //Prüft, ob die ausgewählte "Karte" einen Spezialeffekt (7/8/Bube) hat.
								Hand.hand2.legen(current); //Legt die ausgewählte "Karte" auf die "ablage".
							} else { //Wenn die ausgewählte "Karte" nicht gelegt werden kann, wird der aktuelle Zug noch einmal neu gestartet:
								if (bubeError != true) { //Prüft, ob die Variable "bubeError" auf "true" ist. 
									System.out.println();
									start(); //Neustart des gesamten Zuges durch Aufrufen der Methode "start()".
								} else { //Wenn die Variable "bubeError" auf "true" ist, muss die Variable "bube" ebenfalls noch einmal auf "true" gesetzt werden, da der aktuelle Zug danach neustartet.
									System.out.println();
									bube = true;
									start(); //Neustart des gesamten Zuges durch Aufrufen der Methode "start()".
								}
							}
						}
						if (aktuell == 3) {
							current = Hand.hand3.head;
							for (int i = 0; i < input - 1; i++) { //Läuft vom "head" der "Hand" des aktuellen Spielers bis zur ausgewählten "Karte":
								current = current.next;
							}
							
							//Prüft, ob die ausgewählte "Karte" überhaupt gelegt werden kann:
							if (Hand.hand3.vergleich(current) == true) {
								special(); //Prüft, ob die ausgewählte "Karte" einen Spezialeffekt (7/8/Bube) hat.
								Hand.hand3.legen(current); //Legt die ausgewählte "Karte" auf die "ablage".
							} else { //Wenn die ausgewählte "Karte" nicht gelegt werden kann, wird der aktuelle Zug noch einmal neu gestartet:
								if (bubeError != true) { //Prüft, ob die Variable "bubeError" auf "true" ist. 
									System.out.println();
									start(); //Neustart des gesamten Zuges durch Aufrufen der Methode "start()".
								} else { //Wenn die Variable "bubeError" auf "true" ist, muss die Variable "bube" ebenfalls noch einmal auf "true" gesetzt werden, da der aktuelle Zug danach neustartet.
									System.out.println();
									bube = true;
									start(); //Neustart des gesamten Zuges durch Aufrufen der Methode "start()".
								}
							}
						}
					} else { //Wenn ein unbrauchbarer Wert eingegeben wurde, wird der Zug neugestartet:
						System.out.println();
						zug();
					}
				} else { //Wenn Option 2 ausgewählt wurde, zieht der aktuelle Spieler lediglich eine "Karte" vom "kartenstapel":
					ziehenAlle();
				}
			} else { //Wenn ein unbrauchbarer Wert eingegeben wurde, wird der Zug neugestartet:
				zug(); 
			}
		} else { //Wenn wenn sich keine kompatible "Karte" auf der "Hand" befindet, kann lediglich eine "Karte" vom "kartenstapel" gezogen werden.
			if (seven == true) { //Prüft, ob im vorherigen Zug eine "Karte" mit dem Wert "7" gelegt wurde:
				ziehenAlle(); //Der aktuelle Spieler zieht 2 Karten vom "kartenstapel", weil sein Vorgänger eine "7" gelegt hat.
				System.out.println();
				System.out.print("[Handkarten]: ");
				spieler.ausgeben(); //Ausgabe aller "Karten" auf der "Hand" des aktuellen Spielers.
				seven = false; //Die Variable "seven" wird wieder auf "false" gesetzt, da der aktuelle Spieler bereits 2 "Karten" gezogen hat.
	     		pruefen(); //Prüft, ob der aktuelle Spieler mindestens eine "Karte" legen kann.
				zug(); //Neustart des Zuges.
			}
			System.out.println("[Zug]: 'Ich ziehe eine Karte' (1)"); 
			int input = scanner.nextInt(); //Nächste Tasteneingabe wird eingelesen.
			System.out.println();
			if (input < 2) { //Prüft, ob ein brauchbarer Wert für den Zug eingegeben wurde.
				ziehenAlle(); //Der Spieler zieht eine Karte vom "kartenstapel".
			} else { //Wenn ein unbrauchbarer Wert eingegeben wurde, wird der Zug neugestartet:
				zug();
			}
		}
	}

	//Prüft, ob eine "Karte" einen Spezialeffekt (7/8/Bube) hat.
	public void special() {
		if (current.next.element.charAt(1) == '7') { //Wenn der zweite "char" der aktuellen "Karte" eine "7" ist, wird die Variable "seven" auf "true" gesetzt:
			seven = true;
		}
		if (current.next.element.charAt(1) == '8') { //Wenn der zweite "char" der aktuellen "Karte" eine "8" ist, wird die Variable "eight" auf "true" gesetzt:
			eight = true;
		}
		if (current.next.element.charAt(1) == 'B' && spieler.size() > 1) { //Wenn der zweite "char" der aktuellen "Karte" eine "B" ist, wird die Variable "bube" auf "true" gesetzt:
			bube = true;
		}
		if (bube == true) { //Wenn die Variable "bube" auf "true" ist, darf der aktuelle Spieler sich ein Symbol aussuchen:
			System.out.println();
			System.out.print("[Bitte wählen sie ein Symbol]: ");
			System.out.print("(1: [°] / 2: [+] / 3: [#] / 4: [*])");
			System.out.println();
			bubenInput = scanner.nextInt(); //Nächste Tasteneingabe wird eingelesen.

			if (bubenInput < 5) { //Prüft, ob ein brauchbarer Wert eingegeben wurde:
				System.out.println("-------------------------");

				if (bubenInput == 1) { //Wenn der Wert "1" eingegeben wurde, wird der Variable "bubeChar" der Wert '°' zugewiesen:
					bubeChar = '°';
				}
				if (bubenInput == 2) { //Wenn der Wert "2" eingegeben wurde, wird der Variable "bubeChar" der Wert '+' zugewiesen:
					bubeChar = '+';
				}
				if (bubenInput == 3) { //Wenn der Wert "3" eingegeben wurde, wird der Variable "bubeChar" der Wert '#' zugewiesen:
					bubeChar = '#';
				}
				if (bubenInput == 4) { //Wenn der Wert "4" eingegeben wurde, wird der Variable "bubeChar" der Wert '*' zugewiesen:
					bubeChar = '*';
				}
			} else { //Wenn ein unbrauchbarer Wert eingegeben wurde, wird die Methode "special" neugestartet:
				special(); 
			}
		}
	}
	
	//Prüft nachdem eine "7" gelegt wurde, ob der nächste Spieler ebenfalls eine "7" auf der "Hand" hat und fordert ihn auf, diese zu legen:
	public void counterSeven() {
		if (seven == true) { //Jedesmal wenn eine "7" gelegt wurde, wird der Wert der Variable "sevenStack" um "2" erhöht.
			sevenStack = sevenStack + 2;
			
			//Wenn der aktuelle Spieler mindestens eine "7" auf der "Hand" hat, bekommt er die Möglichkeit, diese zu legen:
			if (spieler.detectSeven() == true) {
				System.out.print("[Zug]: 'Ich lege Karte (");

				if (aktuell == 1) { //Alle "7er" auf der "Hand" des Spielers werden ausgegeben:
					current = Hand.hand1.head.next;
					int j = 0;
					for (int i = 0; i < Hand.hand1.size(); i++) {
						if (current.element.charAt(1) == '7') {
							if (j > 0) {
								System.out.print(" / ");
							}
							System.out.print(i + 1 + ": [" + current.element + "]");
							j++;
						}
						current = current.next;
					}
				}
				if (aktuell == 2) { //Alle "7er" auf der "Hand" des Spielers werden ausgegeben:
					current = Hand.hand2.head.next;
					int j = 0;
					for (int i = 0; i < Hand.hand2.size(); i++) {
						if (current.element.charAt(1) == '7') {
							if (j > 0) {
								System.out.print(" / ");
							}
							System.out.print(i + 1 + ": [" + current.element + "]");
							j++;
						}
						current = current.next;
					}
				}
				if (aktuell == 3) { //Alle "7er" auf der "Hand" des Spielers werden ausgegeben:
					current = Hand.hand3.head.next;
					int j = 0;
					for (int i = 0; i < Hand.hand3.size(); i++) {
						if (current.element.charAt(1) == '7') {
							if (j > 0) {
								System.out.print(" / ");
							}
							System.out.print(i + 1 + ": [" + current.element + "]");
							j++;
						}
						current = current.next;
					}
				}
				
				//Der Spieler wählt nun die gewünschte "7" aus:
				System.out.print(")'");
				System.out.println();
				int input = scanner.nextInt(); //Nächste Tasteneingabe wird eingelesen.
				System.out.println("-------------------------");

				if (aktuell == 1) { //Wenn eine brauchbare Tasteneingabe gemacht wurde, wird die ausgewählte "7" gelegt:
					current = Hand.hand1.head;
					for (int i = 0; i < input - 1; i++) { //Die For-Schleife läuft bis zur ausgewählten "Karte":
						current = current.next;
					}
					if (current.next.element.charAt(1) == '7') { //Es wird überprüft, ob die ausgewählte "Karte" tatsächlich eine "7" ist und wenn ja, dann wird diese auf die "ablage" gelegt:
						Hand.hand1.legen(current);
					} else { //Wenn die ausgewählte "Karte" keine "7" ist, wird die Methode "counterSeven" neugestartet:
						counterSeven();
					}
				}
				if (aktuell == 2) { //Wenn eine brauchbare Tasteneingabe gemacht wurde, wird die ausgewählte "7" gelegt:
					current = Hand.hand2.head;
					for (int i = 0; i < input - 1; i++) { //Die For-Schleife läuft bis zur ausgewählten "Karte":
						current = current.next;
					}
					if (current.next.element.charAt(1) == '7') { //Es wird überprüft, ob die ausgewählte "Karte" tatsächlich eine "7" ist und wenn ja, dann wird diese auf die "ablage" gelegt:
						Hand.hand2.legen(current);
					} else { //Wenn die ausgewählte "Karte" keine "7" ist, wird die Methode "counterSeven" neugestartet:
						counterSeven();
					}
				}
				if (aktuell == 3) { //Wenn eine brauchbare Tasteneingabe gemacht wurde, wird die ausgewählte "7" gelegt:
					current = Hand.hand3.head;
					for (int i = 0; i < input - 1; i++) { //Die For-Schleife läuft bis zur ausgewählten "Karte":
						current = current.next;
					}
					if (current.next.element.charAt(1) == '7') { //Es wird überprüft, ob die ausgewählte "Karte" tatsächlich eine "7" ist und wenn ja, dann wird diese auf die "ablage" gelegt:
						Hand.hand3.legen(current);
					} else { //Wenn die ausgewählte "Karte" keine "7" ist, wird die Methode "counterSeven" neugestartet:
						counterSeven();
					}
				}
			} else { //Wenn der aktuelle Spieler keine "7" auf der "Hand" hat, wird der Zug normal fortgeführt:
				pruefen(); // Prüft, ob der aktuelle Spieler mindestens eine"Karte" legen kann.
				zug(); // Startet den Zug des aktuellen Spielers.
				sevenStack = 0; //Die Variable "sevenStack" wird wieder auf "0" gesetzt.
			}
		} else { //Wenn im vorherigen Zug keine "7" gelegt wurde, dann wird der Zug normal fortgeführt:
			pruefen(); // Prüft, ob der aktuelle Spieler mindestens eine "Karte" legen kann.
			zug(); // Startet den Zug des aktuellen Spielers.
		}
	}
	
	//Startet den nächsten Zug des Spiels, bzw. beendet ggf. das Spiel, wenn ein Spieler gewonnen hat:
	public void win() {
		if (win == false && draw == false) { //Wenn die Variable "win" und "draw" auf "false" sind, wird der nächste Zug gestartet: 
			bubeException = false;
			start(); 
		} 
		if (win = true) { //Wenn ein Spieler gewonnen hat (wenn die Variable "win" auf "true" ist), wird der Sieger angezeigt und das Spiel beendet:
			if (max == 2) {
				if (Hand.hand1.size() == 0) {
					System.out.println("Spieler 1 hat gewonnen!");
					end(); //Beendet das Spiel.
				}
				if (Hand.hand2.size() == 0) {
					System.out.println("Spieler 2 hat gewonnen!");
					end(); //Beendet das Spiel.
				}
			} else {
				if (Hand.hand1.size() == 0) {
					System.out.println("Spieler 1 hat gewonnen!");
					end(); //Beendet das Spiel.
				}
				if (Hand.hand2.size() == 0) {
					System.out.println("Spieler 2 hat gewonnen!");
					end(); //Beendet das Spiel.
				}
				if (Hand.hand3.size() == 0) {
					System.out.println("Spieler 3 hat gewonnen!");
					end(); //Beendet das Spiel.
				}
			}
		}
		if (draw = true) { //Wenn das Spiel unentschieden ausgegangen ist (wenn die Variable "draw" auf "true" ist), wird das Spiel beendet:
			System.out.println("-------------------------");
			System.out.println();
			System.out.println("Unentschieden!");
			end();
		}
	}
	
	//Auswahl, ob das Spiel beendet oder ein neues Spiel gestartet werden soll:
	public void end() {
		System.out.println();
		System.out.println("Zum Neustarten bitte '1' drücken! / Zum Beenden bitte '2' drücken!");
		int input = scanner.nextInt(); //Nächste Tasteneingabe wird eingelesen.
		System.out.println("-------------------------");
		System.out.println();

		if (input == 1) { //Wenn der Wert "1" eingegeben wurde, wird das Spiel neugestartet:
			System.out.println("~NEUSTART~");
			System.out.println();
			System.out.println("-------------------------");
			System.out.println();
			Hand.hand1.clear(); //Die Hand "hand1" wird geleert.
		    Hand.hand2.clear(); //Die Hand "hand1" wird geleert.
		    Hand.hand3.clear(); //Die Hand "hand1" wird geleert.
		    Ablage.ablage.clear(); //Die Ablage wird geleert.
			kartenstapel.mischen(); //Der Kartenstapel wird neu gemischt.
			konfiguration(); //Die Konfiguration wird neu gestartet.
		}
		if (input == 2) { //Wenn der Wert "1" eingegeben wurde, wird das Spiel beendet:
			System.out.println("~SPIEL BEENDET~");
			System.out.println();
			System.out.println("-------------------------");
		}
	}
}
