import java.util.*;

public class Game {
	private Scanner scanner = new Scanner(System.in); // Scanner aus "java.util", der Usereingaben einliest
	private int aktuell; // Aktueller Spieler
	private int counter; // Zählvariable für die Methode "pruefen()"
	private int sevenStack = 0; // Zahl der Karten, die ein Spieler ziehen muss (basierend auf der Zahl zuvor gelegter "7er")
	static int player; // Spieleranzahl
	private boolean win; // Prüft, ob ein Spieler gewonnen hat
	private boolean seven; // Prüft, ob im vorherigen Zug eine "7" gelegt wurde
	private boolean eight; // Prüft, ob im vorherigen Zug eine "8" gelegt wurde
	private boolean bube; // Prüft, ob im vorherigen Zug ein "Bube" gelegt wurde
	private boolean bubeError; // Prüft, ob bei dem Neustart eines Zuges (aufgrund einer fehlerhaften Eingabe) die Variable "bube" auf "true" war.
	static boolean bubeException; // Sorgt dafür, dass kein Fehler aufkommt, wenn ein "Bube" am zu begin des Spiels auf der Ablage liegt.
	static boolean refill; // Prüft, ob der Kartenstapel nachgefüllt werden muss.
	static char bubeChar; // Das Zeichen, das ausgewählt wird, nachdem ein "Bube" gelegt wurde.
	private Hand spieler; // Hand des aktuellen Spielers
	private Karte current; // Zählnode für mehrere Methoden
	private Kartenstapel kartenstapel = new Kartenstapel(); // Erzeugung des Kartenstapels, das im Spiel verwendet wird.
	static int bubenInput;
	
	static int input;//Variable über welcher der User Hauptsächlich mit dem Programm Kommuniziert
	static boolean interagiert;//Zur prüfung einer stattgefundenen Usereingabe
	
	// Startet bei der Erzeugung das Spiel:
	public Game() {
		konfiguration();
	}

	// Konfiguration des Spiels (Spieleranzahl und Startspieler):
	private void konfiguration() {
		
		//Verbergen der nicht benötigten Buttons und Labels
		GameFrame.optionsButtons[3].setVisible(false);
		
		for(int i=1; i<=20; i++){
	    	GameFrame.kartenAblageButtons[i].setVisible(false);
	    }
		
		GameFrame.bubeSetCircle.setVisible(false);
	    GameFrame.bubeSetPlus.setVisible(false);
	    GameFrame.bubeSetHashtag.setVisible(false);
	    GameFrame.bubeSetStar.setVisible(false);  
	    
	    GameFrame.karteLegenButton.setVisible(false);
	    GameFrame.karteAufnehmenButton.setVisible(false);
	    
	    GameFrame.neuStartButton.setVisible(false);
	    GameFrame.beendeenButton.setVisible(false);
	    
	    
	    GameFrame.labelAblageAusgabe.setVisible(false);
	    GameFrame.labelObersteKarte.setVisible(false);
	    GameFrame.labelHandKarten.setVisible(false);
	    GameFrame.labelTextHandkarten.setVisible(false);
	    GameFrame.labelInfoTextGezogen.setVisible(false);	    
	    GameFrame.LabelTextWinner.setVisible(false);

		// Auswahl der Spieleranzahl:
		//System.out.println("Bitte wählen Sie die Spieleranzahl! (2/3)");
	    GameFrame.labelSpielerAnweisungen.setText("Bitte wählen Sie die Spieleranzahl!");//Setzt das Label auf den Entsprechenden Text hier: "Bitte wählen Sie die Spieleranzahl!"
		//int input = scanner.nextInt();
	    GameFrame.labelSpielerAnweisungen.setText("Bitte wählen Sie die Spieleranzahl!");//Setzt das Label auf den Entsprechenden Text hier: "Bitte wählen Sie die Spieleranzahl!"
	    while (interagiert != true) {//Wartet auf Usereingabe in "GameFrame" damit das Programm in "Game" nicht vorschnell weiterläuft(Im folgenden Ebenfalls nicht jedes mal wieder aufgeführt)
	      //System.out.print("");     
	    	try {
				Thread.sleep(30);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	    } 
	    interagiert= false;//Setzt die UsereingabeAbfrageVariable wieder zurück
		player = input;

		// Auswahl des Spielers, der Starten soll:
		if (input == 2 || input == 3) {
			if (player == 2) {
				System.out.println("Welcher Spieler soll starten? (1/2)");
				input = scanner.nextInt();
			}
			if (player == 3) {
				System.out.println("Welcher Spieler soll starten? (1/2/3)");
				input = scanner.nextInt();
			}
		} else {
			kartenstapel.mischen();
			konfiguration();
		}

		// Austeilen der Karten:
		if (input <= player) {
			System.out.println("-------------------------");
			System.out.println();
			aktuell = input;
			kartenstapel.austeilen();
		} else {
			kartenstapel.mischen();
			konfiguration();
		}

		// Aktivierung der "BubeException", wenn zu beginn ein Bube oben auf der Ablage liegt:
		if (Ablage.ablage.peek().charAt(1) == 'B') {
			bubeException = true;
		}

		// Reset der Variablen "win" und "refill" und Start der ersten Runde:
		win = false;
		refill = false;
		start();
	}

	// Start einer Runde:
	private void start() {

		// Wenn vom vorherigen Spieler eine "8" gelegt wurde, wird der aktuelle Spieler übersprungen:
		if (eight == true) {
			if (aktuell != player) {
				aktuell++;
			} else {
				aktuell = 1;
			}
			eight = false;
		}

		// Ausgabe der Handkarten des aktuellen Spielers und der obersten Karte auf der Ablage und Aufforderung zum Zug:
		System.out.println("Spieler " + aktuell + ", machen Sie bitte Ihren Zug!");

		if (player == 2) {
			if (aktuell == 1) {
				spieler = Hand.hand1;
			}
			if (aktuell == 2) {
				spieler = Hand.hand2;
			}
		} else {
			if (aktuell == 1) {
				spieler = Hand.hand1;
			}
			if (aktuell == 2) {
				spieler = Hand.hand2;
			}
			if (aktuell == 3) {
				spieler = Hand.hand3;
			}
		}
		System.out.println();
		System.out.print("[Handkarten]: ");
		spieler.ausgeben();
		System.out.print("[Aktuell]: ");

		// Wenn zuvor ein Bube gelegt wurde, wird lediglich das ausgewählte Symbol und nicht der ganze String angezeigt:
		if (bube != true) {
			Ablage.ablage.ausgeben();
		} else {
			System.out.println(bubeChar);
			System.out.println();
		}
		counterSeven(); // Überprüfung, ob vom vorherigen Spieler eine "7" gelegt wurde und start des Zuges des aktuellen Spielers

		// Spielerwechsel:
		if (aktuell != player) {
			aktuell++;
		} else {
			aktuell = 1;
		}
		System.out.println();

		// Prüft, ob ein Spieler gewonnen hat:
		if (player == 2) {
			if (Hand.hand1.size() == 0 || Hand.hand2.size() == 0) {
				win = true;
			}
		}
		if (player == 3) {
			if (Hand.hand1.size() == 0 || Hand.hand2.size() == 0 || Hand.hand3.size() == 0) {
				win = true;
			}
		}
		win(); // Start einer neuen Runde oder Beendung des Spiels
	}

	// Zug des aktuellen Spielers:
	private void zug() {

		// Wenn Karten gelegt werden können, darf der aktuelle Spieler ziehen oder legen. Ansonsten darf er nur ziehen:
		if (counter > 0) {

			// Wenn der vorherige Spieler eine 7 gelegt hat, werden vom aktuellen Spieler automatisch 2 Karten gezogen:
			if (seven == true) {
				ziehenAlle();
				System.out.println();
				System.out.print("[Handkarten]: ");
				spieler.ausgeben();
				System.out.println();
				seven = false;
			}

			// Auswahl, ob der aktuelle Spieler eine Karte legt, oder eine Karte zieht:
			System.out.println("[Zug]: 'Ich lege eine Karte' / 'Ich ziehe eine Karte' (1/2)");
			int input = scanner.nextInt();

			// Wenn "Option" 1 ausgewählt wurde, wird gefragt, welche Karte gelegt werden soll:
			if (input < 3) {
				if (input == 1) {
					System.out.println("-------------------------");
					System.out.println();
					System.out.print("[Aktuell]: ");
					if (bube != true) {
						Ablage.ablage.ausgeben();
					} else {
						System.out.println(bubeChar);
						System.out.println();
						bube = false;
						bubeError = true;
					}
					System.out.print("[Zug]: 'Ich lege Karte (");

					if (aktuell == 1) {
						current = Hand.hand1.head.next;
						for (int i = 0; i < Hand.hand1.size(); i++) {
							System.out.print(i + 1 + ": [" + current.element + "]");
							if (i != Hand.hand1.size() - 1) {
								System.out.print(" / ");
							}
							current = current.next;
						}
					}
					if (aktuell == 2) {
						current = Hand.hand2.head.next;
						for (int i = 0; i < Hand.hand2.size(); i++) {
							System.out.print(i + 1 + ": [" + current.element + "]");
							if (i != Hand.hand2.size() - 1) {
								System.out.print(" / ");
							}
							current = current.next;
						}
					}
					if (aktuell == 3) {
						current = Hand.hand3.head.next;
						for (int i = 0; i < Hand.hand3.size(); i++) {
							System.out.print(i + 1 + ": [" + current.element + "]");
							if (i != Hand.hand3.size() - 1) {
								System.out.print(" / ");
							}
							current = current.next;
						}
					}
					System.out.print(")'");
					System.out.println();
					input = scanner.nextInt();
					System.out.println("-------------------------");

					// Die ausgewählte Karte wird auf Kompabilität geprüft und ggf. gelegt:
					if (input <= spieler.size()) {
						if (aktuell == 1) {
							current = Hand.hand1.head;

							for (int i = 0; i < input - 1; i++) {
								current = current.next;
							}
							if (Hand.hand1.vergleich(current) == true) {
								special();
								Hand.hand1.legen(current);
							} else {
								if (bubeError != true) {
									System.out.println();
									start();
								} else {
									System.out.println();
									bube = true;
									start();
								}
							}
						}
						if (aktuell == 2) {
							current = Hand.hand2.head;

							for (int i = 0; i < input - 1; i++) {
								current = current.next;
							}

							if (Hand.hand2.vergleich(current) == true) {
								special();
								Hand.hand2.legen(current);
							} else {
								if (bubeError != true) {
									System.out.println();
									start();
								} else {
									System.out.println();
									bube = true;
									start();
								}
							}
						}
						if (aktuell == 3) {
							current = Hand.hand3.head;
							for (int i = 0; i < input - 1; i++) {
								current = current.next;
							}
							if (Hand.hand3.vergleich(current) == true) {
								special();
								Hand.hand3.legen(current);
							} else {
								if (bubeError != true) {
									System.out.println();
									start();
								} else {
									System.out.println();
									bube = true;
									start();
								}
							}
						}
					} else {
						System.out.println();
						zug();
					}
				} else { // Wenn Option 2 ausgewählt wurde, wird lediglich eine Karte gezogen:
					ziehenAlle();
				}
			} else {
				zug();
			}
		} else { // Wenn keine Karten gelegt werden können, darf der Spieler nur eine Karte ziehen:
			if (seven == true) {
				ziehenAlle();
				System.out.println();
				System.out.print("[Handkarten]: ");
				spieler.ausgeben();
				seven = false;
				pruefen();
				zug();
			}
			System.out.println("[Zug]: 'Ich ziehe eine Karte' (1)");
			int input = scanner.nextInt();
			System.out.println();

			if (input < 2) {
				ziehenAlle();
			} else {
				zug();
			}
		}
	}

	// Prüft, ob der aktuelle Spieler Karten legen kann und zählt dabei die Variable "counter" hoch:
	private void pruefen() {
		if (aktuell == 1) {
			counter = 0;
			Karte pruefe = Hand.hand1.head;

			for (int i = 0; i < Hand.hand1.size(); i++) {
				if (Hand.hand1.vergleich(pruefe) == true) {
					counter++;
				}
				pruefe = pruefe.next;
			}
		}
		if (aktuell == 2) {
			counter = 0;
			Karte pruefe = Hand.hand2.head;

			for (int i = 0; i < Hand.hand2.size(); i++) {
				if (Hand.hand2.vergleich(pruefe) == true) {
					counter++;
				}
				pruefe = pruefe.next;
			}
		}
		if (aktuell == 3) {
			counter = 0;
			Karte pruefe = Hand.hand3.head;

			for (int i = 0; i < Hand.hand3.size(); i++) {
				if (Hand.hand3.vergleich(pruefe) == true) {
					counter++;
				}
				pruefe = pruefe.next;
			}
		}
	}

	// Entfernt eine vorgegebene Anzahl an Karten vom Kartenstapel und fügt sie der Hand des aktuellen Spielers hinzu:
	private void ziehenAlle() {

		// Wenn der Kartenstapel nicht leer ist und auch beim Ziehen nicht leer werden würde, wird normal gezogen:
		if (Kartenstapel.kartenstapel.empty() != true && sevenStack < Kartenstapel.kartenstapel.size()) {

			// Bei zuvor gelegten "7ern" werden mehrere Karten gezogen:
			if (seven == true) {
				for (int i = 0; i < sevenStack; i++) {
					if (aktuell == 1) {
						Hand.hand1.ziehen();
					}
					if (aktuell == 2) {
						Hand.hand2.ziehen();
					}
					if (aktuell == 3) {
						Hand.hand3.ziehen();
					}
				}
			} else { // Ansonsten wird nur eine Karte gezogen:
				if (aktuell == 1) {
					Hand.hand1.ziehen();
				}
				if (aktuell == 2) {
					Hand.hand2.ziehen();
				}
				if (aktuell == 3) {
					Hand.hand3.ziehen();
				}
			}
		} else { // Wenn der Kartenstapel leer ist oder beim Ziehen leer werden würde, wird er zunächst aufgefüllt, bevor gezogen wird:

			// Der Kartenstapel wird entweder komplett aufgefüllt oder erhält die Karten der Ablage zurück:
			kartenstapel.reuse();

			if (refill != true) {

				// Danach wird normal weitergezogen:
				if (seven == true) {
					for (int i = 0; i < sevenStack; i++) {
						if (aktuell == 1) {
							Hand.hand1.ziehen();
						}
						if (aktuell == 2) {
							Hand.hand2.ziehen();
						}
						if (aktuell == 3) {
							Hand.hand3.ziehen();
						}
					}
				} else {
					if (aktuell == 1) {
						Hand.hand1.ziehen();
					}
					if (aktuell == 2) {
						Hand.hand2.ziehen();
					}
					if (aktuell == 3) {
						Hand.hand3.ziehen();
					}
				}
			} else {
				kartenstapel.mischen();
			}
		}

		// Ausgabe, wie viele Karten gezogen wurden:
		if (refill != true) {
			System.out.println("-------------------------");
			if (seven == true) {
				System.out.println();
				System.out.println("[Zug]: '" + sevenStack + " Karten gezogen'");
				System.out.println();
			} else {
				System.out.println();
				System.out.println("[Zug]: 'Karte gezogen'");
				System.out.println();
			}
			System.out.println("-------------------------");
		} else {
			refill = false;
			ziehenAlle();
		}
	}

	// Prüft, ob die ausgewählte Karte einen Spezialeffekt ("7"/"8"/"Bube") hat:
	public void special() {
		if (current.next.element.charAt(1) == '7') {
			seven = true;
		}
		if (current.next.element.charAt(1) == '8') {
			eight = true;
		}
		if (current.next.element.charAt(1) == 'B' && spieler.size() > 1) {
			bube = true;
		}

		// Wenn die ausgewählte Karte ein "Bube" ist, darf ein Symbol ausgesucht werden:
		if (bube == true) {
			System.out.println();
			System.out.print("[Bitte wählen sie ein Symbol]: ");
			System.out.print("(1: [°] / 2: [+] / 3: [#] / 4: [*])");
			System.out.println();
			int bubenInput = scanner.nextInt();
			if (bubenInput < 5) {
				System.out.println("-------------------------");

				if (bubenInput == 1) {
					bubeChar = '°';
				}
				if (bubenInput == 2) {
					bubeChar = '+';
				}
				if (bubenInput == 3) {
					bubeChar = '#';
				}
				if (bubenInput == 4) {
					bubeChar = '*';
				}
			} else {
				special();
			}
		}
	}

	// Prüft, wenn eine "7" oben auf der Ablage liegt, ob der aktuelle Spieler ebenfalls eine "7" auf der Hand hat und fordert ihn auf, diese zu legen:
	public void counterSeven() {
		if (seven == true) {
			sevenStack = sevenStack + 2; // Bei jeder gelegten "7" wird der Wert der Variable "sevenStack" um 2 erhöht

			// Wenn der aktuelle Spieler eine "7" auf der Hand besitzt, wird er aufgefordert, sie zu legen:
			if (spieler.detectSeven() == true) {
				System.out.print("[Zug]: 'Ich lege Karte (");

				if (aktuell == 1) {
					current = Hand.hand1.head.next;
					int j = 0;
					for (int i = 0; i < Hand.hand1.size(); i++) {
						if (current.element.charAt(1) == '7') {
							if (j > 0) {
								System.out.print(" / ");
							}
							System.out.print(i + 1 + ": [" + current.element + "]");
							j++;
						}
						current = current.next;
					}
				}
				if (aktuell == 2) {
					current = Hand.hand2.head.next;
					int j = 0;
					for (int i = 0; i < Hand.hand2.size(); i++) {
						if (current.element.charAt(1) == '7') {
							if (j > 0) {
								System.out.print(" / ");
							}
							System.out.print(i + 1 + ": [" + current.element + "]");
							j++;
						}
						current = current.next;
					}
				}
				if (aktuell == 3) {
					current = Hand.hand3.head.next;
					int j = 0;
					for (int i = 0; i < Hand.hand3.size(); i++) {
						if (current.element.charAt(1) == '7') {
							if (j > 0) {
								System.out.print(" / ");
							}
							System.out.print(i + 1 + ": [" + current.element + "]");
							j++;
						}
						current = current.next;
					}
				}
				System.out.print(")'");
				System.out.println();
				int input = scanner.nextInt();
				System.out.println("-------------------------");

				// Wenn die ausgewählte Karte eine "7" ist, wird sie gelegt:
				if (aktuell == 1) {
					current = Hand.hand1.head;
					for (int i = 0; i < input - 1; i++) {
						current = current.next;
					}
					if (current.next.element.charAt(1) == '7') {
						Hand.hand1.legen(current);
					} else {
						counterSeven();
					}
				}
				if (aktuell == 2) {
					current = Hand.hand2.head;
					for (int i = 0; i < input - 1; i++) {
						current = current.next;
					}
					if (current.next.element.charAt(1) == '7') {
						Hand.hand2.legen(current);
					} else {
						counterSeven();
					}
				}
				if (aktuell == 3) {
					current = Hand.hand3.head;
					for (int i = 0; i < input - 1; i++) {
						current = current.next;
					}
					if (current.next.element.charAt(1) == '7') {
						Hand.hand3.legen(current);
					} else {
						counterSeven();
					}
				}
			} else { // Wenn keine 7 gelegt werden kann, wird ein normaler Zug gestartet und die Variable "sevenStack" wird wieder auf "0" gesetzt:
				pruefen(); // Prüft, ob der aktuelle Spieler Karten legen kann
				zug();
				sevenStack = 0;
			}
		} else { // Wenn zuvor keine 7 gelegt wurde, wird ein normaler Zug gestartet:
			pruefen(); // Prüft, ob der aktuelle Spieler Karten legen kann
			zug();
		}
	}

	// Startet die nächste Runde des Spiels, bzw. beendet ggf. das Spiel, wenn ein Spieler keine Karten mehr auf der Hand hat:
	public void win() {

		// Wenn die Variable "win" auf "false" ist, wird die nächste Runde gestartet:
		if (win == false) {
			bubeException = false; // Da die Variable "bubeException" nur für die erste Runde gilt, wird sie danach direkt auf "false" gesetzt
			start();
		}

		// Bei einem Sieg wird der Gewinner bekanntgegeben:
		if (win = true) {
			if (player == 2) {
				if (Hand.hand1.size() == 0) {
					System.out.println("Spieler 1 hat gewonnen!");
					end();
				}
				if (Hand.hand2.size() == 0) {
					System.out.println("Spieler 2 hat gewonnen!");
					end();
				}
			} else {
				if (Hand.hand1.size() == 0) {
					System.out.println("Spieler 1 hat gewonnen!");
					end();
				}
				if (Hand.hand2.size() == 0) {
					System.out.println("Spieler 2 hat gewonnen!");
					end();
				}
				if (Hand.hand3.size() == 0) {
					System.out.println("Spieler 3 hat gewonnen!");
					end();
				}
			}
		}
	}

	// Ende des Spiels und Aufforderung zum Neustart:
	public void end() {
		System.out.println();
		System.out.println("Zum Neustarten bitte '1' drücken!");
		int input = scanner.nextInt();
		System.out.println("-------------------------");
		System.out.println();

		//Leeren aller Hände und der Ablage, neues Auffüllen des Kartenstapels und Neustart des Spiels:
		if (input == 1) {
			System.out.println("~NEUSTART~");
			System.out.println();
			System.out.println("-------------------------");
			System.out.println();
			Hand.hand1.clear();
			Hand.hand2.clear();
			Hand.hand3.clear();
			Ablage.ablage.clear();
			kartenstapel.mischen();
			konfiguration();
		} else {
			end();
		}
	}
}
