import java.util.*;

public class Game {
	private Scanner scanner = new Scanner(System.in); // Scanner aus "java.util", der Usereingaben einliest
	private int aktuell; // Aktueller Spieler
	private int counter; // Zählvariable für die Methode "pruefen()"
	private int sevenStack = 0; // Zahl der Karten, die ein Spieler ziehen muss (basierend auf der Zahl zuvor gelegter "7er")
	static int player; // Spieleranzahl
	private boolean win; // Prüft, ob ein Spieler gewonnen hat
	private boolean seven; // Prüft, ob im vorherigen Zug eine "7" gelegt wurde
	private boolean eight; // Prüft, ob im vorherigen Zug eine "8" gelegt wurde
	private boolean bube; // Prüft, ob im vorherigen Zug ein "Bube" gelegt wurde
	private boolean bubeError; // Prüft, ob bei dem Neustart eines Zuges (aufgrund einer fehlerhaften Eingabe) die Variable "bube" auf "true" war.
	static boolean bubeException; // Sorgt dafür, dass kein Fehler aufkommt, wenn ein Bube am zu begin des Spiels auf der Ablage liegt.
	static boolean refill; // Prüft, ob der Kartenstapel nachgefüllt werden muss.
	static char bubeChar; // Das Zeichen, das ausgewählt wird, nachdem ein Bube gelegt wurde.
	private Hand spieler; // Hand des aktuellen Spielers
	private Karte current; // Zählnode für mehrere Methoden
	private Kartenstapel kartenstapel = new Kartenstapel(); // Erzeugung des Kartenstapels, das im Spiel verwendet wird.

	// Startet bei der Erzeugung das Spiel:
	public Game() {
		konfiguration();
	}

	// Konfiguration des Spiels (Spieleranzahl und Startspieler):
	private void konfiguration() {
		System.out.println("Bitte wählen Sie die Spieleranzahl! (2/3)");
		int input = scanner.nextInt();
		player = input;

		if (input == 2 || input == 3) {
			if (player == 2) {
				System.out.println("Welcher Spieler soll starten? (1/2)");
				input = scanner.nextInt();
			}
			if (player == 3) {
				System.out.println("Welcher Spieler soll starten? (1/2/3)");
				input = scanner.nextInt();
			}
		} else {
			kartenstapel.mischen();
			konfiguration();
		}
		if (input <= player) {
			System.out.println("-------------------------");
			System.out.println();
			aktuell = input;
			kartenstapel.austeilen();
		} else {
			kartenstapel.mischen();
			konfiguration();
		}
		if (Ablage.ablage.peek().charAt(1) == 'B') {
			bubeException = true;
		}
		win = false;
		refill = false;
		start();
	}

	// Start einer Runde:
	private void start() {
		if (eight == true) {
			if (aktuell != player) {
				aktuell++;
			} else {
				aktuell = 1;
			}
			eight = false;
		}
		System.out.println("Spieler " + aktuell + ", machen Sie bitte Ihren Zug!");

		if (player == 2) {
			if (aktuell == 1) {
				spieler = Hand.hand1;
			}
			if (aktuell == 2) {
				spieler = Hand.hand2;
			}
		} else {
			if (aktuell == 1) {
				spieler = Hand.hand1;
			}
			if (aktuell == 2) {
				spieler = Hand.hand2;
			}
			if (aktuell == 3) {
				spieler = Hand.hand3;
			}
		}
		System.out.println();
		System.out.print("[Handkarten]: ");
		spieler.ausgeben();
		System.out.print("[Aktuell]: ");

		if (bube != true) {
			Ablage.ablage.ausgeben();
		} else {
			System.out.println(bubeChar);
			System.out.println();
		}
		counterSeven();

		if (aktuell != player) {
			aktuell++;
		} else {
			aktuell = 1;
		}
		System.out.println();

		if (player == 2) {
			if (Hand.hand1.size() == 0 || Hand.hand2.size() == 0) {
				win = true;
			}
		}
		if (player == 3) {
			if (Hand.hand1.size() == 0 || Hand.hand2.size() == 0 || Hand.hand3.size() == 0) {
				win = true;
			}
		}
		win();
	}

	// Zug des aktuellen Spielers:
	private void zug() {
		if (counter > 0) {
			if (seven == true) {
				ziehenAlle();
				System.out.println();
				System.out.print("[Handkarten]: ");
				spieler.ausgeben();
				System.out.println();
				seven = false;
			}
			System.out.println("[Zug]: 'Ich lege eine Karte' / 'Ich ziehe eine Karte' (1/2)");
			int input = scanner.nextInt();

			if (input < 3) {
				if (input == 1) {
					System.out.println("-------------------------");
					System.out.println();
					System.out.print("[Aktuell]: ");
					if (bube != true) {
						Ablage.ablage.ausgeben();
					} else {
						System.out.println(bubeChar);
						System.out.println();
						bube = false;
						bubeError = true;
					}
					System.out.print("[Zug]: 'Ich lege Karte (");

					if (aktuell == 1) {
						current = Hand.hand1.head.next;
						for (int i = 0; i < Hand.hand1.size(); i++) {
							System.out.print(i + 1 + ": [" + current.element + "]");
							if (i != Hand.hand1.size() - 1) {
								System.out.print(" / ");
							}
							current = current.next;
						}
					}
					if (aktuell == 2) {
						current = Hand.hand2.head.next;
						for (int i = 0; i < Hand.hand2.size(); i++) {
							System.out.print(i + 1 + ": [" + current.element + "]");
							if (i != Hand.hand2.size() - 1) {
								System.out.print(" / ");
							}
							current = current.next;
						}
					}
					if (aktuell == 3) {
						current = Hand.hand3.head.next;
						for (int i = 0; i < Hand.hand3.size(); i++) {
							System.out.print(i + 1 + ": [" + current.element + "]");
							if (i != Hand.hand3.size() - 1) {
								System.out.print(" / ");
							}
							current = current.next;
						}
					}
					System.out.print(")'");
					System.out.println();
					input = scanner.nextInt();
					System.out.println("-------------------------");

					if (input <= spieler.size()) {
						if (aktuell == 1) {
							current = Hand.hand1.head;

							for (int i = 0; i < input - 1; i++) {
								current = current.next;
							}
							if (Hand.hand1.vergleich(current) == true) {
								special();
								Hand.hand1.legen(current);
							} else {
								if (bubeError != true) {
									System.out.println();
									start();
								} else {
									System.out.println();
									bube = true;
									start();
								}
							}
						}
						if (aktuell == 2) {
							current = Hand.hand2.head;

							for (int i = 0; i < input - 1; i++) {
								current = current.next;
							}

							if (Hand.hand2.vergleich(current) == true) {
								special();
								Hand.hand2.legen(current);
							} else {
								if (bubeError != true) {
									System.out.println();
									start();
								} else {
									System.out.println();
									bube = true;
									start();
								}
							}
						}
						if (aktuell == 3) {
							current = Hand.hand3.head;
							for (int i = 0; i < input - 1; i++) {
								current = current.next;
							}
							if (Hand.hand3.vergleich(current) == true) {
								special();
								Hand.hand3.legen(current);
							} else {
								if (bubeError != true) {
									System.out.println();
									start();
								} else {
									System.out.println();
									bube = true;
									start();
								}
							}
						}
					} else {
						System.out.println();
						zug();
					}
				} else {
					ziehenAlle();
				}
			} else {
				zug();
			}
		} else {
			if (seven == true) {
				ziehenAlle();
				System.out.println();
				System.out.print("[Handkarten]: ");
				spieler.ausgeben();
				seven = false;
				pruefen();
				zug();
			}
			System.out.println("[Zug]: 'Ich ziehe eine Karte' (1)");
			int input = scanner.nextInt();
			System.out.println();

			if (input < 2) {
				ziehenAlle();
			} else {
				zug();
			}
		}
	}

	// Prüft, ob der aktuelle Spieler mindestens eine Karte legen kann:
	private void pruefen() {
		if (aktuell == 1) {
			counter = 0;
			Karte pruefe = Hand.hand1.head;

			for (int i = 0; i < Hand.hand1.size(); i++) {
				if (Hand.hand1.vergleich(pruefe) == true) {
					counter++;
				}
				pruefe = pruefe.next;
			}
		}
		if (aktuell == 2) {
			counter = 0;
			Karte pruefe = Hand.hand2.head;

			for (int i = 0; i < Hand.hand2.size(); i++) {
				if (Hand.hand2.vergleich(pruefe) == true) {
					counter++;
				}
				pruefe = pruefe.next;
			}
		}
		if (aktuell == 3) {
			counter = 0;
			Karte pruefe = Hand.hand3.head;

			for (int i = 0; i < Hand.hand3.size(); i++) {
				if (Hand.hand3.vergleich(pruefe) == true) {
					counter++;
				}
				pruefe = pruefe.next;
			}
		}
	}

	// Entfernt eine vorgegebene Anzahl an Karten vom Kartenstapel und fügt sie der Hand des aktuellen Spielers hinzu:
	private void ziehenAlle() {
		if (Kartenstapel.kartenstapel.empty() != true && sevenStack < Kartenstapel.kartenstapel.size()) {
			if (seven == true) {
				for (int i = 0; i < sevenStack; i++) {
					if (aktuell == 1) {
						Hand.hand1.ziehen();
					}
					if (aktuell == 2) {
						Hand.hand2.ziehen();
					}
					if (aktuell == 3) {
						Hand.hand3.ziehen();
					}
				}
			} else {
				if (aktuell == 1) {
					Hand.hand1.ziehen();
				}
				if (aktuell == 2) {
					Hand.hand2.ziehen();
				}
				if (aktuell == 3) {
					Hand.hand3.ziehen();
				}
			}
		} else {
			kartenstapel.reuse();
			if (refill != true) {
				if (seven == true) {
					for (int i = 0; i < sevenStack; i++) {
						if (aktuell == 1) {
							Hand.hand1.ziehen();
						}
						if (aktuell == 2) {
							Hand.hand2.ziehen();
						}
						if (aktuell == 3) {
							Hand.hand3.ziehen();
						}
					}
				} else {
					if (aktuell == 1) {
						Hand.hand1.ziehen();
					}
					if (aktuell == 2) {
						Hand.hand2.ziehen();
					}
					if (aktuell == 3) {
						Hand.hand3.ziehen();
					}
				}
			} else {
				kartenstapel.mischen();
			}
		}
		if (refill != true) {
			System.out.println("-------------------------");
			if (seven == true) {
				System.out.println();
				System.out.println("[Zug]: '" + sevenStack + " Karten gezogen'");
				System.out.println();
			} else {
				System.out.println();
				System.out.println("[Zug]: 'Karte gezogen'");
				System.out.println();
			}
			System.out.println("-------------------------");
		} else {
			refill = false;
			ziehenAlle();
		}
	}

	//Prüft, ob die ausgewählte Karte einen Spezialeffekt ("7"/"8"/"Bube") hat:
	public void special() {
		if (current.next.element.charAt(1) == '7') {
			seven = true;
		}
		if (current.next.element.charAt(1) == '8') {
			eight = true;
		}
		if (current.next.element.charAt(1) == 'B' && spieler.size() > 1) {
			bube = true;
		}
		if (bube == true) {
			System.out.println();
			System.out.print("[Bitte wählen sie ein Symbol]: ");
			System.out.print("(1: [°] / 2: [+] / 3: [#] / 4: [*])");
			System.out.println();
			int bubenInput = scanner.nextInt();
			if (bubenInput < 5) {
				System.out.println("-------------------------");

				if (bubenInput == 1) {
					bubeChar = '°';
				}
				if (bubenInput == 2) {
					bubeChar = '+';
				}
				if (bubenInput == 3) {
					bubeChar = '#';
				}
				if (bubenInput == 4) {
					bubeChar = '*';
				}
			} else {
				special();
			}
		}
	}

	//Prüft, wenn eine "7" oben auf der Ablage liegt, ob der aktuelle Spieler ebenfalls eine "7" auf der Hand hat und fordert ihn auf, diese zu legen:
	public void counterSeven() {
		if (seven == true) {
			sevenStack = sevenStack + 2;

			if (spieler.detectSeven() == true) {
				System.out.print("[Zug]: 'Ich lege Karte (");

				if (aktuell == 1) {
					current = Hand.hand1.head.next;
					int j = 0;
					for (int i = 0; i < Hand.hand1.size(); i++) {
						if (current.element.charAt(1) == '7') {
							if (j > 0) {
								System.out.print(" / ");
							}
							System.out.print(i + 1 + ": [" + current.element + "]");
							j++;
						}
						current = current.next;
					}
				}
				if (aktuell == 2) {
					current = Hand.hand2.head.next;
					int j = 0;
					for (int i = 0; i < Hand.hand2.size(); i++) {
						if (current.element.charAt(1) == '7') {
							if (j > 0) {
								System.out.print(" / ");
							}
							System.out.print(i + 1 + ": [" + current.element + "]");
							j++;
						}
						current = current.next;
					}
				}
				if (aktuell == 3) {
					current = Hand.hand3.head.next;
					int j = 0;
					for (int i = 0; i < Hand.hand3.size(); i++) {
						if (current.element.charAt(1) == '7') {
							if (j > 0) {
								System.out.print(" / ");
							}
							System.out.print(i + 1 + ": [" + current.element + "]");
							j++;
						}
						current = current.next;
					}
				}
				System.out.print(")'");
				System.out.println();
				int input = scanner.nextInt();
				System.out.println("-------------------------");

				if (aktuell == 1) {
					current = Hand.hand1.head;
					for (int i = 0; i < input - 1; i++) {
						current = current.next;
					}
					if (current.next.element.charAt(1) == '7') {
						Hand.hand1.legen(current);
					} else {
						counterSeven();
					}
				}
				if (aktuell == 2) {
					current = Hand.hand2.head;
					for (int i = 0; i < input - 1; i++) {
						current = current.next;
					}
					if (current.next.element.charAt(1) == '7') {
						Hand.hand2.legen(current);
					} else {
						counterSeven();
					}
				}
				if (aktuell == 3) {
					current = Hand.hand3.head;
					for (int i = 0; i < input - 1; i++) {
						current = current.next;
					}
					if (current.next.element.charAt(1) == '7') {
						Hand.hand3.legen(current);
					} else {
						counterSeven();
					}
				}
			} else {
				pruefen();
				zug();
				sevenStack = 0;
			}
		} else {
			pruefen();
			zug();
		}
	}

	//Startet den nächsten Zug des Spiels, bzw. beendet ggf. das Spiel, wenn ein Spieler keine Karten mehr auf der Hand hat:
	public void win() {
		if (win == false) {
			bubeException = false;
			start();
		}
		if (win = true) {
			if (player == 2) {
				if (Hand.hand1.size() == 0) {
					System.out.println("Spieler 1 hat gewonnen!");
					end();
				}
				if (Hand.hand2.size() == 0) {
					System.out.println("Spieler 2 hat gewonnen!");
					end();
				}
			} else {
				if (Hand.hand1.size() == 0) {
					System.out.println("Spieler 1 hat gewonnen!");
					end();
				}
				if (Hand.hand2.size() == 0) {
					System.out.println("Spieler 2 hat gewonnen!");
					end();
				}
				if (Hand.hand3.size() == 0) {
					System.out.println("Spieler 3 hat gewonnen!");
					end();
				}
			}
		}
	}

	// Ende des Spiels. Aufforderung zum Neustart:
	public void end() {
		System.out.println();
		System.out.println("Zum Neustarten bitte '1' drücken!");
		int input = scanner.nextInt();
		System.out.println("-------------------------");
		System.out.println();

		if (input == 1) {
			System.out.println("~NEUSTART~");
			System.out.println();
			System.out.println("-------------------------");
			System.out.println();
			Hand.hand1.clear();
			Hand.hand2.clear();
			Hand.hand3.clear();
			Ablage.ablage.clear();
			kartenstapel.mischen();
			konfiguration();
		} else {
			end();
		}
	}
}
