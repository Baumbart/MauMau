import java.util.*;

public class Kartenstapel {
	private Vergleichstabelle vgl = new Vergleichstabelle(); //Erzeugung einer Vergleichstabelle mit allen Kartenwerten.
	static Stack<String> kartenstapel = new Stack<String>(); //Erzeugung eines Kartenstapels (Stack aus "java.util").

	//"Kartendeck", von dem die Karten gezogen werden:
	public Kartenstapel() {
		mischen();
	}

	//Leert den "kartenstapel", liest die Kartenwerte aus der "Vergleichstabelle" aus, fügt sie dem "kartenstapel" hinzu und mischt diesen dann:
	public void mischen() {
		for (int i = 0; i < kartenstapel.size(); i++) { //Leert jede einzelne "Karte" aus dem "kartenstapel": 
			kartenstapel.pop();
		}
		for (int i = 0; i < 4; i++) { //Füllt den "kartenstapel" mit 32 "Karten" aller Kartenwerte aus der "Vergleichstabelle":
			for (int j = 0; j < 8; j++) {
				kartenstapel.push(vgl.getVergleich(j, i));
			}
		}
		Collections.shuffle(kartenstapel); //"shuffle" aus "java.util" verwendet.
	}

	//Prüft die Spieleranzahl, verteilt dementsprechend "Karten" an die Spieler, legt eine "Karte" auf die "ablage" und entfernt die ausgeteilten "Karten" vom "kartenstapel":
	public void austeilen() {
		if (Matchconfig.spieler == 2) { //Wenn die Spieleranzahl "2" beträgt, werden auch lediglich "Karten" an "hand1" und "hand2" verteilt:
			int i = 0;
			int j = 1;

			while (i < 14) {
				Karte current = new Karte(kartenstapel.pop());
				if (j == 1) {
					Hand.hand1.add(Hand.hand1.head, current);
				} else {
					Hand.hand2.add(Hand.hand2.head, current);
					j = 0;
				}
				i++;
				j++;
			}
		}
		if (Matchconfig.spieler == 3) { //Wenn die Spieleranzahl "3" beträgt, werden "Karten" an alle "Hände" verteilt:
			int i = 0;
			int j = 1;
			while (i < 21) {
				Karte current = new Karte(kartenstapel.pop());
				if (j == 1) {
					Hand.hand1.add(Hand.hand1.head, current);
				}
				if (j == 2) {
					Hand.hand2.add(Hand.hand2.head, current);
				}
				if (j == 3) {
					Hand.hand3.add(Hand.hand3.head, current);
					j = 0;
				}
				i++;
				j++;
			}
		}
		
		//Am Ende wird noch eine weitere "Karte" vom "kartenstapel" entfernt und oben auf die "ablage" gelegt:
		Karte current = new Karte(kartenstapel.pop());
		Ablage.ablage.push(current);
	}

	//Wenn der "kartenstapel" leer ist, werden die Karten aus der "ablage" entfernt und dem "kartenstapel" wieder hinzugefügt:
	public void reuse() {
		if (kartenstapel.empty() == true) { 
			Stack<String> temp = new Stack<String>();
			temp.push(Ablage.ablage.pop()); 
			while (Ablage.ablage.head.next != null) {
				kartenstapel.push(Ablage.ablage.pop());
			}
			
			//Am Ende wird der "kartenstapel" gemischt und die letzte "Karte" wird wieder der "ablage" hinzugefügt:
			Collections.shuffle(kartenstapel); //"shuffle" aus "java.util" verwendet.
			Ablage.ablage.push(temp.pop());
		}
	}
}
