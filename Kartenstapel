import java.util.*;

public class Kartenstapel {
	private Vergleichstabelle vgl = new Vergleichstabelle(); // Erzeugung einer Vergleichstabelle
	static Stack<String> kartenstapel = new Stack<String>(); // Erzeugung eines Stacks, der als Kartenstapel verwendet wird verwendet wird (Stack aus "java.util")

	// "Kartendeck" von dem alle Karten gezogen werden:
	public Kartenstapel() {
		mischen();
	}

	// F체gt dem Kartenstapel alle 32 Karten hinzu und mischt ihn danach:
	public void mischen() {
		for (int i = 0; i < kartenstapel.size(); i++) {
			kartenstapel.pop();
		}
		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < 8; j++) {
				kartenstapel.push(vgl.getVergleich(j, i));
			}
		}
		Collections.shuffle(kartenstapel);
	}

	// Entfernt jeweils 7 Karten aus dem Kartenstapel und f체gt sie den H채nden der Spieler hinzu:
	public void austeilen() {
		if (Game.player == 2) {
			int i = 0;
			int j = 1;

			while (i < 14) {
				Karte current = new Karte(kartenstapel.pop());

				if (j == 1) {
					Hand.hand1.add(Hand.hand1.head, current);
				} else {
					Hand.hand2.add(Hand.hand2.head, current);
					j = 0;
				}
				i++;
				j++;
			}
		}
		if (Game.player == 3) {
			int i = 0;
			int j = 1;

			while (i < 21) {
				Karte current = new Karte(kartenstapel.pop());

				if (j == 1) {
					Hand.hand1.add(Hand.hand1.head, current);
				}
				if (j == 2) {
					Hand.hand2.add(Hand.hand2.head, current);
				}
				if (j == 3) {
					Hand.hand3.add(Hand.hand3.head, current);
					j = 0;
				}
				i++;
				j++;
			}
		}
		Karte current = new Karte(kartenstapel.pop());
		Ablage.ablage.push(current);
	}

	// Entfernt alle Karten (bis auf die oberste) von der Ablage, f체gt sie dem Kartenstapel hinzu und mischt diesen:
	public void reuse() {
		if (Ablage.ablage.size() == 1) {
			Game.refill = true;
		} else {
			Stack<String> temp = new Stack<String>();
			temp.push(Ablage.ablage.pop());

			while (Ablage.ablage.head.next != null) {
				kartenstapel.push(Ablage.ablage.pop());
			}
			Collections.shuffle(kartenstapel);
			Ablage.ablage.push(temp.pop());
		}
	}
}
