import java.util.*;

public class Kartenstapel {
	private Vergleichstabelle vgl = new Vergleichstabelle(); //Erzeugung einer Vergleichstabelle mit allen Kartenwerten.
	static Stack<String> kartenstapel = new Stack<String>(); //Erzeugung eines Kartenstapels (Stack aus Java.util).

	//"Kartendeck", von dem die Karten gezogen werden:
	public Kartenstapel() {
		mischen();
	}

	//Liest die Kartenwerte aus dem Vergeleichsstapel aus, fügt sie dem Kartenstapel hinzu und mischt dann den Kartenstapel:
	public void mischen() {
		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < 8; j++) {
				kartenstapel.push(vgl.getVergleich(j, i));
			}
		}
		Collections.shuffle(kartenstapel);
	}

	//Prüft die Spieleranzahl, verteilt dementsprechend Karten an die Spieler und entfernt die ausgeteilten Karten vom Kartenstapel:
	public void austeilen() {
		if (Matchconfig.spieler == 2) {
			int i = 0;
			int j = 1;

			while (i < 14) {
				Karte current = new Karte(kartenstapel.pop());
				if (j == 1) {
					Hand.hand1.add(Hand.hand1.head, current);
				} else {
					Hand.hand2.add(Hand.hand2.head, current);
					j = 0;
				}
				i++;
				j++;
			}
		}
		if (Matchconfig.spieler == 3) {
			int i = 0;
			int j = 1;
			while (i < 21) {
				Karte current = new Karte(kartenstapel.pop());
				if (j == 1) {
					Hand.hand1.add(Hand.hand1.head, current);
				}
				if (j == 2) {
					Hand.hand2.add(Hand.hand2.head, current);
				}
				if (j == 3) {
					Hand.hand3.add(Hand.hand3.head, current);
					j = 0;
				}
				i++;
				j++;
			}
		}
		Karte current = new Karte(kartenstapel.pop());
		Ablage.ablage.push(current);
	}

	//Nimmt die Karten aus der Ablage, fügt sie in den Kartenstapel ein und mischt den Kartenstapel. Die oberste Karte der Ablage bleibt liegen:
	public void reuse() {
		if (kartenstapel.empty() == true) {
			Stack<String> temp = new Stack<String>();
			temp.push(Ablage.ablage.pop());
			while (Ablage.ablage.head.next != null) {
				kartenstapel.push(Ablage.ablage.pop());
			}
			Collections.shuffle(kartenstapel);
			Ablage.ablage.push(temp.pop());
		}
	}
}
