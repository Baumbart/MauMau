import java.util.*;  

public class Game {
  private Scanner scanner = new Scanner(System.in);  //Erzeugung eines Scanners aus java.util.
  private int aktuell; 
  private int max; 
  private int handkarten; 
  private int counter;
  private Hand spieler; 
  private boolean win; //Prüft, ob ein Spieler gewonnen hat.
  private boolean seven;
  private boolean eight;
  private boolean bube;
  private boolean bubeError;
  private int bubenInput;
  private Karte current;
  public static char bubeChar;
  private Kartenstapel kartenstapel = new Kartenstapel(); //Erzeugung eines neuen "Kartendecks".  
  static int input;
  static boolean gedrückt;
  
  
  
  
  
  //Objekt, das bei der Erzeugung das Spiel startet:
  public Game() {
    konfiguration();
  }
  
  
  //Konfiguration des Spiels:
  private void konfiguration() {
    //Auswahl der Spieleranzahl:
    Fenster3.jButton1.setVisible(false);
    //System.out.println("Bitte wählen Sie die Spieleranzahl! (2/3)");
    Fenster3.jLabel1.setText("Bitte wählen Sie die Spieleranzahl!");
    
    //int input = scanner.nextInt();
    while (gedrückt != true) {//Wartet auf usereingabe in Fenster3 damit das Programm nicht vorschnell weiterläuft
      //System.out.print("");
      Fenster3.jLabel1.setText("Bitte wählen Sie die Spieleranzahl!");      
    } // end of while
    
    gedrückt= false;
    
    
    //int input = scanner.nextInt();
    Matchconfig.setSpielerzahl(input);
    max = input; //Der Variable "max" wird die Spielerzahl zugewiesen.
    
    //Auswahl des Spielers, der als erstes dran ist - basierend auf der Spielerzahl:
    if (input < 3 || input > 1) { //Prüft, ob die Spieleranzahl entweder den Wert "2" oder "3" beträgt.
      if (max == 2) {
        Fenster3.zähler++;
        
        //System.out.println("Welcher Spieler soll starten? (1/2)");
        Fenster3.jLabel1.setText("Welcher Spieler soll starten?");
        
        Fenster3.jButton2.setText("Spieler Eins");
        Fenster3.jButton3.setText("Spieler Zwei");
        
        
        while(gedrückt != true){
          Fenster3.jLabel1.setText("Welcher Spieler soll starten?");          
        }
        gedrückt= false;        
        //input = scanner.nextInt();
      }
      if (max == 3) {
        Fenster3.zähler++;
        
        Fenster3.jButton1.setVisible(true);
        //System.out.println("Welcher Spieler soll starten? (1/2/3)");
        Fenster3.jLabel1.setText("Welcher Spieler soll starten?");
        
        Fenster3.jButton2.setText("Spieler Eins");
        Fenster3.jButton3.setText("Spieler Zwei");
        while(gedrückt != true){
          Fenster3.jLabel1.setText("Welcher Spieler soll starten?");          
        }
        gedrückt= false;
        //input = scanner.nextInt();
      }
    } else { //Wenn die Spieleranzahl kleiner als "2" oder größer als "3" ist, wird die Konfiguration neugestartet:
      kartenstapel.mischen();
      konfiguration();
    }
    
    Fenster3.jButton1.setVisible(false);
    Fenster3.jButton2.setVisible(false);
    Fenster3.jButton3.setVisible(false);
    
    
    
    if (input <= max) { 
      /*
      System.out.println("-------------------------");
      System.out.println();
      */
      aktuell = input; //Der Variable "aktuell" wird der Startspieler / aktuelle Spieler zugewiesen. 
      kartenstapel.austeilen(); //Die Karten werden an die Spieler ausgeteilt.  
    } else { //Wenn bei der Auswahl des Startspielers ein unbrauchbarer Wert eingegeben wurde, wird die Konfiguration neugestartet:
      kartenstapel.mischen();
      konfiguration();
    }
    
    start(); //Das Spiel wird gestartet.
  }
  
  //Startet das eigentliche Spiel:
  private void start() { 
    win = false; //Zu Spielbeginn wird die Variable "win" auf "false" gesetzt, weil noch keiner gewonnen hat.
    
    //Prüft, ob der vorherige Spieler eine 8 gelegt hat:
    if (eight == true) { //Wenn die Variable "eight" auf "true" ist, wird der aktuelle Spieler übersprungen und der nächste Spieler ist dran:
      if (aktuell != max) {
        aktuell++;
      } else { 
        aktuell = 1;
      }
      eight = false; //Die Variable "eight" wird wieder auf "false" gesetzt, wenn sie auf "true" war.
    }
    System.out.println("Spieler " + aktuell + ", machen Sie bitte Ihren Zug!"); //Der aktuelle Spieler wird aufgefordert, seinen Zug zu machen.
    
    //Prüft, ob die Spieleranzahl 2 oder 3 ist:
    if (max == 2) {
      
      //Prüft, welcher Spieler aktuell am Zug ist:
      if (aktuell == 1) {
        handkarten = Hand.hand1.size(); //Der Variable "handkarten" wird die Anzahl der Karten auf "hand1" aus der Klasse "Hand" zugewiesen.
        spieler = Hand.hand1; //Der Variable "spieler" wird die Hand "hand1" aus der Klasse "Hand" zugewiesen.
      }
      if (aktuell == 2) {
        handkarten = Hand.hand2.size(); //Der Variable "handkarten" wird die Anzahl der Karten auf "hand2" aus der Klasse "Hand" zugewiesen.
        spieler = Hand.hand2; //Der Variable "spieler" wird die Hand "hand2" aus der Klasse "Hand" zugewiesen.
      }
    } else {
      
      //Prüft, welcher Spieler aktuell dran ist:
      if (aktuell == 1) {
        handkarten = Hand.hand1.size(); //Der Variable "handkarten" wird die Anzahl der Karten auf "hand1" aus der Klasse "Hand" zugewiesen.
        spieler = Hand.hand1; //Der Variable "spieler" wird die Hand "hand1" aus der Klasse "Hand" zugewiesen.
      }
      if (aktuell == 2) {
        handkarten = Hand.hand2.size(); //Der Variable "handkarten" wird die Anzahl der Karten auf "hand2" aus der Klasse "Hand" zugewiesen.
        spieler = Hand.hand2; //Der Variable "spieler" wird die Hand "hand2" aus der Klasse "Hand" zugewiesen.
      }
      if (aktuell == 3) {
        handkarten = Hand.hand3.size(); //Der Variable "handkarten" wird die Anzahl der Karten auf "hand3" aus der Klasse "Hand" zugewiesen.
        spieler = Hand.hand3; //Der Variable "spieler" wird die Hand "hand3" aus der Klasse "Hand" zugewiesen.
      }
    }
    
    //Die Werte der Handkarten und der Wert der obersten Karte auf der Ablage werden ausgegeben:
    System.out.println();
    System.out.print("[Handkarten]: ");
    spieler.ausgeben();
    System.out.print("[Aktuell]: ");
    
    //Prüft, ob die Variable "bube" auf "true" ist:
    if (bube != true) { //Wenn die Variable "bube" auf "false" ist, wird ganz normal die oberste Karte auf der Ablage ausgegeben:
      Ablage.ablage.ausgeben(); 
    } else { //Wenn die Variable "bube" auf true ist, wird lediglich der erste "char" des Kartenwerts angegeben, weil der zweite egal ist:
      System.out.println(bubeChar);
      System.out.println();
    }
    pruefen(); //Prüft, ob der aktuelle Spieler mindestens eine Karte legen kann.
    zug(); //Startet den Zug des aktuellen Spielers.
    
    //Nach dem Zug wird der Spieler gewechselt:
    if (aktuell != max) { 
      aktuell++; 
    } else {
      aktuell = 1;
    }
    System.out.println();
    
    //Prüft, ob ein Spieler 0 Karten auf seiner Hand hat:
    if (max == 2) {
      if (Hand.hand1.size() == 0 || Hand.hand2.size() == 0) {
        win = true; //Wenn einer der Spieler keine Karten mehr hat, wird die Variable "win" auf "true" gesetzt.
      }
    }
    if (max == 3) {
      if (Hand.hand1.size() == 0 || Hand.hand2.size() == 0 || Hand.hand3.size() == 0) {
        win = true; //Wenn einer der Spieler keine Karten mehr hat, wird die Variable "win" auf "true" gesetzt.
      }
    }
    win(); //Prüft, ob die Variable "win" auf "true" ist und beendet ggf. das Spiel.
  }
  
  //Zieht eine Karte vom Kartenstapel und fügt sie bei dem aktuellen Spieler auf der Hand hinzu:
  private void ziehenAlle() {
    if (Kartenstapel.kartenstapel.empty() == false) { //Prüft, ob der Kartenstapel leer ist:
      
      //Prüft, ob der vorherige Spieler eine 7 gelegt hat:
      if (seven == true) { //Wenn die Variable "seven" auf "true" ist, zieht der aktuelle Spieler zwei Karten:
        for (int i = 0; i < 2; i++) {
          if (aktuell == 1) {
            Hand.hand1.ziehen();
          }
          if (aktuell == 2) {
            Hand.hand2.ziehen();
          }
          if (aktuell == 3) {
            Hand.hand3.ziehen();
          }
        }
      } else { //Wenn die Variable "seven" auf "false" ist, zieht der aktuelle Spieler eine Karte:
        if (aktuell == 1) {
          Hand.hand1.ziehen();
        }
        if (aktuell == 2) {
          Hand.hand2.ziehen();
        }
        if (aktuell == 3) {
          Hand.hand3.ziehen();
        }
      }
    } else { //Wenn der Kartenstapel leer ist, wird er "aufgefüllt" und danach werden erst die Karten gezogen:
      kartenstapel.reuse(); //Die Karten der Ablage werden auf den Kartenstapel übertragen und gemischt. Die oberste Karte der Ablage bleibt hierbei liegen.
      if (seven == true) {
        for (int i = 0; i < 1; i++) {
          if (aktuell == 1) {
            Hand.hand1.ziehen();
          }
          if (aktuell == 2) {
            Hand.hand2.ziehen();
          }
          if (aktuell == 3) {
            Hand.hand3.ziehen();
          }
        }
      } else {
        if (aktuell == 1) {
          Hand.hand1.ziehen();
        }
        if (aktuell == 2) {
          Hand.hand2.ziehen();
        }
        if (aktuell == 3) {
          Hand.hand3.ziehen();
        }
      }
    }
    
    //Es wird angezeigt, wie viele Karten gezogen wurden:
    System.out.println("-------------------------");
    if (seven == true) {
      System.out.println();
      System.out.println("[Zug]: '2 Karten gezogen'");
      System.out.println();
    } else {
      System.out.println();
      System.out.println("[Zug]: 'Karte gezogen'");
      System.out.println();
    }
    System.out.println("-------------------------");
  }
  
  //Prüft, ob der aktuelle Spieler mindestens eine Karte legen kann:
  private void pruefen() { 
    if (aktuell == 1) {
      counter = 0; //Weist der Variable "counter" den Wert "0" zu.
      Karte pruefe = Hand.hand1.head; //Erzeugt eine Karte "pruefe" und setzt sie mit dem "head" von "hand1" gleich.
      
      //Läuft durch jede Karte von hand1 durch:
      for (int i = 0; i < handkarten; i++) {
        
        //Wenn der Wert einer Handkarte mit dem Wert der oberen Karte auf der Ablage kompatibel ist, wird der Wert von "counter" um "1" erhöht.
        if (Hand.hand1.vergleich(pruefe) == true) { 
          counter++;
        }
        pruefe = pruefe.next;
      }
    }
    if (aktuell == 2) {
      counter = 0; //Weist der Variable "counter" den Wert "0" zu.
      Karte pruefe = Hand.hand2.head; //Erzeugt eine Karte "pruefe" und setzt sie mit dem "head" von "hand2" gleich.
      
      //Läuft durch jede Karte von hand1 durch:
      for (int i = 0; i < handkarten; i++) {
        
        //Wenn der Wert einer Handkarte mit dem Wert der oberen Karte auf der Ablage kompatibel ist, wird der Wert von "counter" um "1" erhöht.
        if (Hand.hand2.vergleich(pruefe) == true) {
          counter++;
        }
        pruefe = pruefe.next;
      }
    }
    if (aktuell == 3) {
      counter = 0; //Weist der Variable "counter" den Wert "0" zu.
      Karte pruefe = Hand.hand3.head; //Erzeugt eine Karte "pruefe" und setzt sie mit dem "head" von "hand3" gleich.
      
      //Läuft durch jede Karte von hand1 durch:
      for (int i = 0; i < handkarten; i++) {
        
        //Wenn der Wert einer Handkarte mit dem Wert der oberen Karte auf der Ablage kompatibel ist, wird der Wert von "counter" um "1" erhöht.
        if (Hand.hand3.vergleich(pruefe) == true) {
          counter++;
        }
        pruefe = pruefe.next;
      }
    }
  }
  
  //Startet den Zug des aktuellen Spielers:
  private void zug() {
    if (counter > 0) {
      if (seven == true) {
        ziehenAlle();
        System.out.println();
        System.out.print("[Handkarten]: ");
        spieler.ausgeben();
        System.out.println();
        seven = false;
      }
      System.out
      .println("[Zug]: 'Ich lege eine Karte' / 'Ich ziehe eine Karte' (1/2)");
      int input = scanner.nextInt();
      
      if (input < 3) {
        if (input == 1) {
          System.out.println("-------------------------");
          System.out.println();
          System.out.print("[Aktuell]: ");
          if (bube != true) {
            Ablage.ablage.ausgeben();
          } else {
            System.out.println(bubeChar);
            System.out.println();
            bube = false;
            bubeError = true;
          }
          System.out.print("[Zug]: 'Ich lege Karte (");
          if (aktuell == 1) {
            current = Hand.hand1.head.next;
            for (int i = 0; i < handkarten; i++) {
              System.out.print(i + 1 + ": [" + current.element
              + "]");
              if (i != handkarten - 1) {
                System.out.print(" / ");
              }
              current = current.next;
            }
          }
          if (aktuell == 2) {
            current = Hand.hand2.head.next;
            for (int i = 0; i < handkarten; i++) {
              System.out.print(i + 1 + ": [" + current.element
              + "]");
              if (i != handkarten - 1) {
                System.out.print(" / ");
              }
              current = current.next;
            }
          }
          if (aktuell == 3) {
            current = Hand.hand3.head.next;
            for (int i = 0; i < handkarten; i++) {
              System.out.print(i + 1 + ": [" + current.element
              + "]");
              if (i != handkarten - 1) {
                System.out.print(" / ");
              }
              current = current.next;
            }
          }
          System.out.print(")'");
          System.out.println();
          input = scanner.nextInt();
          System.out.println("-------------------------");
          
          if (input <= handkarten) {
            if (aktuell == 1) {
              current = Hand.hand1.head;
              for (int i = 0; i < input - 1; i++) {
                current = current.next;
              }
              if (Hand.hand1.vergleich(current) == true) {
                special();
                Hand.hand1.legen(current);
              } else {
                if (bubeError != true) {
                  System.out.println();
                  start();
                } else {
                  System.out.println();
                  bube = true;
                  start();
                }
              }
            }
            if (aktuell == 2) {
              current = Hand.hand2.head;
              for (int i = 0; i < input - 1; i++) {
                current = current.next;
              }
              if (Hand.hand2.vergleich(current) == true) {
                special();
                Hand.hand2.legen(current);
              } else {
                if (bubeError != true) {
                  System.out.println();
                  start();
                } else {
                  System.out.println();
                  bube = true;
                  start();
                }
              }
            }
            if (aktuell == 3) {
              current = Hand.hand3.head;
              for (int i = 0; i < input - 1; i++) {
                current = current.next;
              }
              if (Hand.hand3.vergleich(current) == true) {
                special();
                Hand.hand3.legen(current);
              } else {
                if (bubeError != true) {
                  System.out.println();
                  start();
                } else {
                  System.out.println();
                  bube = true;
                  start();
                }
              }
            }
          } else {
            System.out.println();
            zug();
          }
        } else {
          ziehenAlle();
        }
      } else {
        zug();
      }
    } else {
      if (seven == true) {
        ziehenAlle();
        System.out.println();
        System.out.print("[Handkarten]: ");
        spieler.ausgeben();
        seven = false;
        pruefen();
        zug();
      }
      System.out.println("[Zug]: 'Ich ziehe eine Karte' (1)");
      int input = scanner.nextInt();
      System.out.println();
      if (input < 2) {
        ziehenAlle();
      } else {
        zug();
      }
    }
  }
  
  public void special() {
    if (current.next.element.charAt(1) == '7') {
      seven = true;
    }
    if (current.next.element.charAt(1) == '8') {
      eight = true;
    }
    if (current.next.element.charAt(1) == 'B') {
      bube = true;
    }
    if (bube == true) {
      System.out.println();
      System.out.print("[Bitte wählen sie ein Symbol]: ");
      System.out.print("(1: [°] / 2: [+] / 3: [#] / 4: [*])");
      System.out.println();
      bubenInput = scanner.nextInt();
      
      if (bubenInput < 5) {
        System.out.println("-------------------------");
        
        if (bubenInput == 1) {
          bubeChar = '°';
        }
        if (bubenInput == 2) {
          bubeChar = '+';
        }
        if (bubenInput == 3) {
          bubeChar = '#';
        }
        if (bubenInput == 4) {
          bubeChar = '*';
        }
      } else {
        special();
      }
    }
  }
  
  public void win() {
    if (win == false) {
      start();
    } else {
      if (max == 2) {
        if (Hand.hand1.size() == 0) {
          System.out.println("Spieler 1 hat gewonnen!");
          end();
        }
        if (Hand.hand2.size() == 0) {
          System.out.println("Spieler 2 hat gewonnen!");
          end();
        }
      } else {
        if (Hand.hand1.size() == 0) {
          System.out.println("Spieler 1 hat gewonnen!");
          end();
        }
        if (Hand.hand2.size() == 0) {
          System.out.println("Spieler 2 hat gewonnen!");
          end();
        }
        if (Hand.hand3.size() == 0) {
          System.out.println("Spieler 3 hat gewonnen!");
          end();
        }
      }
    }
  }
  
  public void end() {
    System.out.println();
    System.out
    .println("Zum Neustarten bitte '1' drücken! / Zum Beenden bitte '2' drücken!");
    int input = scanner.nextInt();
    System.out.println("-------------------------");
    System.out.println();
    
    if (input == 1) {
      System.out.println("~NEUSTART~");
      System.out.println();
      System.out.println("-------------------------");
      System.out.println();
      kartenstapel.mischen();
      konfiguration();
    }
    if (input == 2) {
      System.out.println("~SPIEL BEENDET~");
      System.out.println();
      System.out.println("-------------------------");
    }
  }
}
