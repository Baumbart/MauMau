public class Hand {
  Karte head = new Karte("");
  
  //Erzeugung der 3 unten definierten Hände:
  public static Hand hand1 = new Hand(); //Erzeugung einer "Hand" für Spieler 1
  public static Hand hand2 = new Hand(); //Erzeugung einer "Hand" für Spieler 2
  public static Hand hand3 = new Hand(); //Erzeugung einer "Hand" für Spieler 3
  
  //"Hand" (Linked List), auf der sich die Handkarten eines Spielers befinden:
  public Hand() {
    head.next = null;
  }
  
  //Löscht eine Karte vom "kartenstapel" und fügt sie einer "Hand" hinzu:
  public void ziehen() {
    add(head, Kartenstapel.kartenstapel.pop());
  }
  
  //Löscht eine "Karte" von einer "Hand" und fügt sie oben auf der "ablage" hinzu:
  public void legen(Karte vorgaenger) { 
    String current = vorgaenger.next.element; //Der Variable "current" wird der Wert der aktuellen Karte zugewiesen.
    vorgaenger.next = vorgaenger.next.next; 
    Ablage.ablage.push(current); //Fügt eine "Karte" mit dem Wert von "current" oben auf der "ablage" ein.
  }
  
  //Erzeugt eine Karte und fügt sie einer Hand hinzu:
  public void add(Karte vorgaenger, String wert) {
    Karte newKarte = new Karte(wert);
    newKarte.next = vorgaenger.next;
    vorgaenger.next = newKarte;
  }
  
  //Fügt eine bereits vorhandene "Karte" einer "Hand" hinzu:
  public void add(Karte vorgaenger, Karte wert) {
    Karte newKarte = wert;
    newKarte.next = vorgaenger.next;
    vorgaenger.next = newKarte;
  }
  
  //Return der Kartenanzahl auf einer "Hand":
  public int size() {
    Karte current = head;
    int size = 0; //"size" ist die Zählvariable, deren Wert später zurückgegeben wird.
    while (current.next != null) {
      current = current.next;
      size++; //Bei jedem Durchlauf wird der Wert der Variable "size" um "1" erhöht.
    }
    return size;
  }
  
  //Entfernt alle "Karten" von einer "Hand":
  public void clear() {
    head.next = null;
  }
  
  //Schaut, ob ein Spieler die ausgewählte "Karte" überhaupt legen kann und returned dann "true" oder "false":
  public boolean vergleich(Karte handKarte) {
    boolean vergleich = false;//Der boolean "vergleich" wird zu beginn auf "false" gesetzt, da bisher noch nichts verglichen wurde.
    String handWert = handKarte.next.element; //Die Variable "handWert" bekommt den Wert der ausgewählten "Karte" zugewiesen.
    String ablageWert = Ablage.ablage.peek(); //Die Variable "ablageWert" bekommt den Wert der obersten Karte auf der "ablage" zugewiesen.
    
    //Die einzelnen chars werden verschiedenen Variablen zugewiesen:
    char handWert1 = handWert.charAt(0);
    char handWert2 = handWert.charAt(1);
    char ablageWert1 = ablageWert.charAt(0);
    char ablageWert2 = ablageWert.charAt(1);
    
    
    //Prüft, ob die ausgewählte Karte entweder ein Bube ist oder ob eine Stelle des Kartenwertes mit dem der obersten Karte auf der Ablage übereinstimmt:
    if (handWert1 == ablageWert1 || handWert2 == ablageWert2 || handWert2 == 'B' || ablageWert2 == 'B') {
      if (ablageWert2 == 'B') { //Wenn oben auf der "ablage" ein "Bube" liegt, muss noch ein Sonderfall überprüft werden:
        if (Game.bubeException == true) { //Wenn die Variable "bubeException" auf "true" ist, darf sich der aktuelle Spieler aussuchen, welche "Karte" er legt:
          vergleich = true;
        }
        if (handWert1 == Game.bubeChar || handWert2 == 'B') { //Prüft, ob der erste char der ausgewählten "Karte" mit dem Wert der Variable "bubeChar" übereinstimmt oder ob die ausgewählte "Karte" ein "Bube" ist:
          vergleich = true;
        } 
        if (handWert1 == ablageWert1) {
          vergleich = true;
        }
      } else { //Wenn oben auf der "ablage" kein "Bube" liegt, dann reicht der vorherige Vergleicht, um die Variable "vergleich" auf "true" zu setzen:
        vergleich = true;
      }
    }
    return vergleich;
  }
  
  //Prüft, ob eine Karte mit dem Wert "7" auf einer Hand ist:
  public boolean detectSeven() {
    boolean sieben = false;
    Karte detector = head.next;
    for (int i = 0; i < size() - 1; i++) {
      detector = detector.next;
      if (detector.element.charAt(1) == '7') {
        sieben = true;
      }
    }
    return sieben;
  }
  
  //Ausgabe der Werte aller Handkarten einer Hand:
  public void ausgeben() {
    Karte currentKarte = head.next;
    Fenster3.labelHandKarten.setText("");//Leert das labelHandKarten von Text
    while (currentKarte != null) {
      if (currentKarte.next != null) {
        Fenster3.labelHandKarten.setVisible(true);//Enthüllt das labelHandKarten
        //System.out.print(currentKarte.element + ", ");        
        Fenster3.labelHandKarten.setText(Fenster3.labelHandKarten.getText()+" "+currentKarte.element+"");//Beschriftet das labelHandKarten mit den aktuellen Handkarten(ausgenommen der Letzten)
        currentKarte = currentKarte.next;
      } else {
        Fenster3.labelHandKarten.setVisible(true);//Enthüllt das labelHandKarten
        //System.out.print(currentKarte.element);
        
        Fenster3.labelHandKarten.setText(Fenster3.labelHandKarten.getText()+" "+currentKarte.element);//Beschriftet das labelHandKarten mit den aktuellen Handkarten(eingeschlossen der Letzten)
        
        currentKarte = currentKarte.next;
      }
    }
    //System.out.println();
  }
}
